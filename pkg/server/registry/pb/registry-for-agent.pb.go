/*
 * Copyright 2022 Holoinsight Project Authors. Licensed under Apache-2.0.
 */

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: registry-for-agent.proto

package pb

import (
	pb "github.com/traas-stack/holoinsight-agent/pkg/server/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 一个采集任务 = 采集配置 + 采集目标 的结合体
type CollectTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 对于页面上一个配置对应的同一个采集目标, 即使配置或目标的**内容**发生了变化, 该key始终保持不变
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// 这里不指持有实际的采集配置和采集目标, 而是持有它们的key
	CollectConfigKey string `protobuf:"bytes,2,opt,name=collect_config_key,json=collectConfigKey,proto3" json:"collect_config_key,omitempty"`
	CollectTargetKey string `protobuf:"bytes,3,opt,name=collect_target_key,json=collectTargetKey,proto3" json:"collect_target_key,omitempty"`
}

func (x *CollectTask) Reset() {
	*x = CollectTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectTask) ProtoMessage() {}

func (x *CollectTask) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectTask.ProtoReflect.Descriptor instead.
func (*CollectTask) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{0}
}

func (x *CollectTask) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CollectTask) GetCollectConfigKey() string {
	if x != nil {
		return x.CollectConfigKey
	}
	return ""
}

func (x *CollectTask) GetCollectTargetKey() string {
	if x != nil {
		return x.CollectTargetKey
	}
	return ""
}

type CollectTask2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config  *CollectConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	Target  *CollectTarget `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Version string         `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *CollectTask2) Reset() {
	*x = CollectTask2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectTask2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectTask2) ProtoMessage() {}

func (x *CollectTask2) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectTask2.ProtoReflect.Descriptor instead.
func (*CollectTask2) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{1}
}

func (x *CollectTask2) GetConfig() *CollectConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CollectTask2) GetTarget() *CollectTarget {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *CollectTask2) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// 一个采集配置
type CollectConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 实际上也就是对应 table_name
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// 对于页面上一个配置对应的同一个采集目标, 如果内容发生变化则该version会更新
	// TODO 当用户拿着2个version, 怎么知道哪个是新的呢?
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// 用于描述content的类型
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// 配置内容, 可能是一个大json, 但总之使用bytes来描述
	Content []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *CollectConfig) Reset() {
	*x = CollectConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectConfig) ProtoMessage() {}

func (x *CollectConfig) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectConfig.ProtoReflect.Descriptor instead.
func (*CollectConfig) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{2}
}

func (x *CollectConfig) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CollectConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CollectConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CollectConfig) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

// 采集目标
type CollectTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO 元数据内容是否也可能变化?
	Key     string            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Type    string            `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Version string            `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Meta    map[string]string `protobuf:"bytes,4,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CollectTarget) Reset() {
	*x = CollectTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectTarget) ProtoMessage() {}

func (x *CollectTarget) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectTarget.ProtoReflect.Descriptor instead.
func (*CollectTarget) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{3}
}

func (x *CollectTarget) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CollectTarget) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CollectTarget) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CollectTarget) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

type CollectConfigsBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 该bucket的状态
	State string `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	// 属于该bucket的所有采集任务, 如果state与请求里的相同, 那么说明没有变化, 此时tasks为空
	CollectTasks []*CollectTask `protobuf:"bytes,2,rep,name=collect_tasks,json=collectTasks,proto3" json:"collect_tasks,omitempty"`
}

func (x *CollectConfigsBucket) Reset() {
	*x = CollectConfigsBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectConfigsBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectConfigsBucket) ProtoMessage() {}

func (x *CollectConfigsBucket) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectConfigsBucket.ProtoReflect.Descriptor instead.
func (*CollectConfigsBucket) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{4}
}

func (x *CollectConfigsBucket) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CollectConfigsBucket) GetCollectTasks() []*CollectTask {
	if x != nil {
		return x.CollectTasks
	}
	return nil
}

type Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 唯一识别该agent的id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 该agent的ip
	Ip       string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// TODO 版本号
	// 其他扩展字段
	Other map[string]string `protobuf:"bytes,4,rep,name=other,proto3" json:"other,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Agent) Reset() {
	*x = Agent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{5}
}

func (x *Agent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Agent) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Agent) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Agent) GetOther() map[string]string {
	if x != nil {
		return x.Other
	}
	return nil
}

// 描述一个采集过程中的错误
type ProcessingError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ProcessingError) Reset() {
	*x = ProcessingError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessingError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessingError) ProtoMessage() {}

func (x *ProcessingError) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessingError.ProtoReflect.Descriptor instead.
func (*ProcessingError) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{6}
}

func (x *ProcessingError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RegisterAgentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AgentId      string                  `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	AgentVersion string                  `protobuf:"bytes,3,opt,name=agent_version,json=agentVersion,proto3" json:"agent_version,omitempty"`
	// 该agent的ip, 对于多网卡的场景需要想办法取到正确的ip地址
	// 比如应该排除docker0网卡上的ip, 具体可以参考一些java的NetUtils类
	Ip string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	// 主机名, 启动时缓存, 不用考虑主机名变化的case
	Hostname string `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// 见 golang 的 runtime.GOOS
	Os string `protobuf:"bytes,6,opt,name=os,proto3" json:"os,omitempty"`
	// 见 golang 的 runtime.GOARCH
	Arch string `protobuf:"bytes,7,opt,name=arch,proto3" json:"arch,omitempty"`
	// 其他扩展字段
	// TODO 具体有哪些以及来源都要明确文档
	// 比如我可以想到的, 如果发现用户跑在aws下
	// aws.instanceId
	// aws.type 规格, t3.large TODO 是不是叫这个名字 可能是有个专门的单词的
	Labels map[string]string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 关联的app
	App string `protobuf:"bytes,9,opt,name=app,proto3" json:"app,omitempty"`
	// k8s 场景下使用
	K8S *AgentK8SInfo `protobuf:"bytes,10,opt,name=k8s,proto3" json:"k8s,omitempty"`
	// sidecar daemonset clusteragent
	Mode      string `protobuf:"bytes,11,opt,name=mode,proto3" json:"mode,omitempty"`
	Workspace string `protobuf:"bytes,12,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Cluster   string `protobuf:"bytes,13,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *RegisterAgentRequest) Reset() {
	*x = RegisterAgentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAgentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAgentRequest) ProtoMessage() {}

func (x *RegisterAgentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAgentRequest.ProtoReflect.Descriptor instead.
func (*RegisterAgentRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{7}
}

func (x *RegisterAgentRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RegisterAgentRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *RegisterAgentRequest) GetAgentVersion() string {
	if x != nil {
		return x.AgentVersion
	}
	return ""
}

func (x *RegisterAgentRequest) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RegisterAgentRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *RegisterAgentRequest) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *RegisterAgentRequest) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *RegisterAgentRequest) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *RegisterAgentRequest) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *RegisterAgentRequest) GetK8S() *AgentK8SInfo {
	if x != nil {
		return x.K8S
	}
	return nil
}

func (x *RegisterAgentRequest) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *RegisterAgentRequest) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *RegisterAgentRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

type AgentK8SInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostIp    string `protobuf:"bytes,1,opt,name=host_ip,json=hostIp,proto3" json:"host_ip,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Pod       string `protobuf:"bytes,3,opt,name=pod,proto3" json:"pod,omitempty"`
	// for daemonset
	NodeHostname string `protobuf:"bytes,4,opt,name=node_hostname,json=nodeHostname,proto3" json:"node_hostname,omitempty"`
}

func (x *AgentK8SInfo) Reset() {
	*x = AgentK8SInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentK8SInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentK8SInfo) ProtoMessage() {}

func (x *AgentK8SInfo) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentK8SInfo.ProtoReflect.Descriptor instead.
func (*AgentK8SInfo) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{8}
}

func (x *AgentK8SInfo) GetHostIp() string {
	if x != nil {
		return x.HostIp
	}
	return ""
}

func (x *AgentK8SInfo) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AgentK8SInfo) GetPod() string {
	if x != nil {
		return x.Pod
	}
	return ""
}

func (x *AgentK8SInfo) GetNodeHostname() string {
	if x != nil {
		return x.NodeHostname
	}
	return ""
}

type RegisterAgentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Tenant string                   `protobuf:"bytes,2,opt,name=tenant,proto3" json:"tenant,omitempty"`
}

func (x *RegisterAgentResponse) Reset() {
	*x = RegisterAgentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterAgentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterAgentResponse) ProtoMessage() {}

func (x *RegisterAgentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterAgentResponse.ProtoReflect.Descriptor instead.
func (*RegisterAgentResponse) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterAgentResponse) GetHeader() *pb.CommonResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RegisterAgentResponse) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

// 发送agent的心跳
type SendAgentHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AgentId string                  `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (x *SendAgentHeartbeatRequest) Reset() {
	*x = SendAgentHeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendAgentHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAgentHeartbeatRequest) ProtoMessage() {}

func (x *SendAgentHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAgentHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*SendAgentHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{10}
}

func (x *SendAgentHeartbeatRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SendAgentHeartbeatRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

type SendAgentHeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *SendAgentHeartbeatResponse) Reset() {
	*x = SendAgentHeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendAgentHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendAgentHeartbeatResponse) ProtoMessage() {}

func (x *SendAgentHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendAgentHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*SendAgentHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{11}
}

func (x *SendAgentHeartbeatResponse) GetHeader() *pb.CommonResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type GetControlConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AgentId string                  `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (x *GetControlConfigsRequest) Reset() {
	*x = GetControlConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetControlConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetControlConfigsRequest) ProtoMessage() {}

func (x *GetControlConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetControlConfigsRequest.ProtoReflect.Descriptor instead.
func (*GetControlConfigsRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{12}
}

func (x *GetControlConfigsRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetControlConfigsRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

type GetControlConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header      *pb.CommonResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	BasicConfig *BasicConfig             `protobuf:"bytes,2,opt,name=basic_config,json=basicConfig,proto3" json:"basic_config,omitempty"`
	DebugConfig *DebugConfig             `protobuf:"bytes,3,opt,name=debug_config,json=debugConfig,proto3" json:"debug_config,omitempty"`
}

func (x *GetControlConfigsResponse) Reset() {
	*x = GetControlConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetControlConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetControlConfigsResponse) ProtoMessage() {}

func (x *GetControlConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetControlConfigsResponse.ProtoReflect.Descriptor instead.
func (*GetControlConfigsResponse) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{13}
}

func (x *GetControlConfigsResponse) GetHeader() *pb.CommonResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetControlConfigsResponse) GetBasicConfig() *BasicConfig {
	if x != nil {
		return x.BasicConfig
	}
	return nil
}

func (x *GetControlConfigsResponse) GetDebugConfig() *DebugConfig {
	if x != nil {
		return x.DebugConfig
	}
	return nil
}

// TODO 具体有哪些配置很大程度取决于agent
// 以及服务端想要试下怎样的控制能力, 需要在实践中修改
// 基础配置
type BasicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 如果>0则每隔多少秒发一次心跳, 代码里会检查最小值是5s, 默认是60秒
	HeartbeatIntervalSeconds   int32 `protobuf:"varint,1,opt,name=heartbeat_interval_seconds,json=heartbeatIntervalSeconds,proto3" json:"heartbeat_interval_seconds,omitempty"`
	ReonnectInterval           int32 `protobuf:"varint,2,opt,name=reonnect_interval,json=reonnectInterval,proto3" json:"reonnect_interval,omitempty"`
	SyncConfigsIntervalSeconds int32 `protobuf:"varint,3,opt,name=sync_configs_interval_seconds,json=syncConfigsIntervalSeconds,proto3" json:"sync_configs_interval_seconds,omitempty"`
}

func (x *BasicConfig) Reset() {
	*x = BasicConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicConfig) ProtoMessage() {}

func (x *BasicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicConfig.ProtoReflect.Descriptor instead.
func (*BasicConfig) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{14}
}

func (x *BasicConfig) GetHeartbeatIntervalSeconds() int32 {
	if x != nil {
		return x.HeartbeatIntervalSeconds
	}
	return 0
}

func (x *BasicConfig) GetReonnectInterval() int32 {
	if x != nil {
		return x.ReonnectInterval
	}
	return 0
}

func (x *BasicConfig) GetSyncConfigsIntervalSeconds() int32 {
	if x != nil {
		return x.SyncConfigsIntervalSeconds
	}
	return 0
}

// 调试相关的配置
type DebugConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 是否打印详细日志, 默认是false
	LogVerbose bool `protobuf:"varint,1,opt,name=log_verbose,json=logVerbose,proto3" json:"log_verbose,omitempty"`
	// 事件、指标上报相关，用于问题定位排查
	// 是否关闭该功能
	ReportDisable bool `protobuf:"varint,2,opt,name=reportDisable,proto3" json:"reportDisable,omitempty"`
	// 事件上报限流值。如果>0则表示允许每台agent每分钟上报多少条处理错误到服务端, 有助于排查问题(自助诊断), 程序内部可以再限制一个值, 默认是0
	ReportProcessingErrorCount int32 `protobuf:"varint,3,opt,name=reportProcessingErrorCount,proto3" json:"reportProcessingErrorCount,omitempty"`
}

func (x *DebugConfig) Reset() {
	*x = DebugConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugConfig) ProtoMessage() {}

func (x *DebugConfig) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugConfig.ProtoReflect.Descriptor instead.
func (*DebugConfig) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{15}
}

func (x *DebugConfig) GetLogVerbose() bool {
	if x != nil {
		return x.LogVerbose
	}
	return false
}

func (x *DebugConfig) GetReportDisable() bool {
	if x != nil {
		return x.ReportDisable
	}
	return false
}

func (x *DebugConfig) GetReportProcessingErrorCount() int32 {
	if x != nil {
		return x.ReportProcessingErrorCount
	}
	return 0
}

// 同步配置的请求
// 之类展开说一下同步配置的细节:
// 1. 该接口做的是全量同步
// 2. 最简单的做法是返回的配置是一个数组 [{...}]
// 3. 但显然这样返回的内容会有点多, 每次哪怕只有1个元素变了, 也要返回所有元素 (这在域外可能是可以接受的, 配置少), 但在主站是不太好的
// 4. 这在公有云上也不太好, 因为SLB可能是按流量收费的
// 5. 所以要像办法减少传输的数据量, 只传输必要的数据(但方案又不能太复杂
// 于是有了如下的buckets分桶方案
// 1. 将配置分在若干个桶里即 map<string, [{}]>, agent不用管桶的key是如何决定的, 对agent来说就是一个字符串而已
// 2. registry侧决定桶的key的具体取值, 比如在主站(对于vessel)可以取agentIp, 按agentIp分桶, 对于域外, 如果认为配置数不多, 那么可以总是取为 "", 这样相当于不分桶
// 3. registry会保证, 对于同一个配置始终是在一个桶里, 也就是说这个分配的算法是不能改变的
// 4. 该方案实际上只是通过分桶减少了发生改变时需要传递的数据量, 但并没有完全减少不必要的传输
// 5. 想做到理想的完全避免不必要的传输, 则双方需要交换 task keys, 通过对比新旧 task keys 决定出哪些 tasks 需要变更; 这个流程比较繁琐, 在云上不一定要实现
type GetCollectTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AgentId string                  `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// agent持有的所有buckets的状态
	Buckets map[string]string `protobuf:"bytes,3,rep,name=buckets,proto3" json:"buckets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetCollectTasksRequest) Reset() {
	*x = GetCollectTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectTasksRequest) ProtoMessage() {}

func (x *GetCollectTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectTasksRequest.ProtoReflect.Descriptor instead.
func (*GetCollectTasksRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{16}
}

func (x *GetCollectTasksRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetCollectTasksRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *GetCollectTasksRequest) GetBuckets() map[string]string {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type GetCollectTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 返回每个bucket的最新状态, 如果bucket里的state与agent上的state相同, 那么说明该bucket没有任何变化
	// 此时其对应的 collect_tasks 也会为空
	Buckets map[string]*CollectConfigsBucket `protobuf:"bytes,2,rep,name=buckets,proto3" json:"buckets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 引用的配置
	CollectConfigs map[string]*CollectConfig `protobuf:"bytes,3,rep,name=collect_configs,json=collectConfigs,proto3" json:"collect_configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 应用的采集目标, 绝大多数只会有一个目标, 就是本机
	CollectTargets map[string]*CollectTarget `protobuf:"bytes,4,rep,name=collect_targets,json=collectTargets,proto3" json:"collect_targets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetCollectTasksResponse) Reset() {
	*x = GetCollectTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCollectTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCollectTasksResponse) ProtoMessage() {}

func (x *GetCollectTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCollectTasksResponse.ProtoReflect.Descriptor instead.
func (*GetCollectTasksResponse) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{17}
}

func (x *GetCollectTasksResponse) GetHeader() *pb.CommonResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetCollectTasksResponse) GetBuckets() map[string]*CollectConfigsBucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *GetCollectTasksResponse) GetCollectConfigs() map[string]*CollectConfig {
	if x != nil {
		return x.CollectConfigs
	}
	return nil
}

func (x *GetCollectTasksResponse) GetCollectTargets() map[string]*CollectTarget {
	if x != nil {
		return x.CollectTargets
	}
	return nil
}

// todo 命名上用stats or metrics ?
// 目前只用两种指标
type RunStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header                *pb.CommonRequestHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AgentId               string                   `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Timestamp             int64                    `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AgentRunStats         map[string]uint64        `protobuf:"bytes,4,rep,name=agent_run_stats,json=agentRunStats,proto3" json:"agent_run_stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CollectConfigRunStats []*CollectConfigRunStats `protobuf:"bytes,5,rep,name=collect_config_run_stats,json=collectConfigRunStats,proto3" json:"collect_config_run_stats,omitempty"`
}

func (x *RunStatsRequest) Reset() {
	*x = RunStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunStatsRequest) ProtoMessage() {}

func (x *RunStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunStatsRequest.ProtoReflect.Descriptor instead.
func (*RunStatsRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{18}
}

func (x *RunStatsRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RunStatsRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *RunStatsRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RunStatsRequest) GetAgentRunStats() map[string]uint64 {
	if x != nil {
		return x.AgentRunStats
	}
	return nil
}

func (x *RunStatsRequest) GetCollectConfigRunStats() []*CollectConfigRunStats {
	if x != nil {
		return x.CollectConfigRunStats
	}
	return nil
}

type CollectConfigRunStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 采集配置表名
	TableName string            `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Stats     map[string]uint64 `protobuf:"bytes,2,rep,name=stats,proto3" json:"stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CollectConfigRunStats) Reset() {
	*x = CollectConfigRunStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectConfigRunStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectConfigRunStats) ProtoMessage() {}

func (x *CollectConfigRunStats) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectConfigRunStats.ProtoReflect.Descriptor instead.
func (*CollectConfigRunStats) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{19}
}

func (x *CollectConfigRunStats) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *CollectConfigRunStats) GetStats() map[string]uint64 {
	if x != nil {
		return x.Stats
	}
	return nil
}

type RunStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *RunStatsResponse) Reset() {
	*x = RunStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunStatsResponse) ProtoMessage() {}

func (x *RunStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunStatsResponse.ProtoReflect.Descriptor instead.
func (*RunStatsResponse) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{20}
}

func (x *RunStatsResponse) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type RunEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AgentId string                  `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// key-eventType, value-eventMsg
	Events []*RunEvent `protobuf:"bytes,3,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *RunEventsRequest) Reset() {
	*x = RunEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunEventsRequest) ProtoMessage() {}

func (x *RunEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunEventsRequest.ProtoReflect.Descriptor instead.
func (*RunEventsRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{21}
}

func (x *RunEventsRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RunEventsRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *RunEventsRequest) GetEvents() []*RunEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type RunEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	Msg       string `protobuf:"bytes,2,opt,name=Msg,proto3" json:"Msg,omitempty"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *RunEvent) Reset() {
	*x = RunEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunEvent) ProtoMessage() {}

func (x *RunEvent) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunEvent.ProtoReflect.Descriptor instead.
func (*RunEvent) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{22}
}

func (x *RunEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RunEvent) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RunEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type RunEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *RunEventsResponse) Reset() {
	*x = RunEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunEventsResponse) ProtoMessage() {}

func (x *RunEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunEventsResponse.ProtoReflect.Descriptor instead.
func (*RunEventsResponse) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{23}
}

func (x *RunEventsResponse) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type BiStreamClientHandshakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentId string `protobuf:"bytes,1,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Version int64  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *BiStreamClientHandshakeRequest) Reset() {
	*x = BiStreamClientHandshakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BiStreamClientHandshakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiStreamClientHandshakeRequest) ProtoMessage() {}

func (x *BiStreamClientHandshakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiStreamClientHandshakeRequest.ProtoReflect.Descriptor instead.
func (*BiStreamClientHandshakeRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{24}
}

func (x *BiStreamClientHandshakeRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *BiStreamClientHandshakeRequest) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type BiStreamClientHandshakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *BiStreamClientHandshakeResponse) Reset() {
	*x = BiStreamClientHandshakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BiStreamClientHandshakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiStreamClientHandshakeResponse) ProtoMessage() {}

func (x *BiStreamClientHandshakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiStreamClientHandshakeResponse.ProtoReflect.Descriptor instead.
func (*BiStreamClientHandshakeResponse) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{25}
}

func (x *BiStreamClientHandshakeResponse) GetHeader() *pb.CommonResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type MetaSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetaSync) Reset() {
	*x = MetaSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaSync) ProtoMessage() {}

func (x *MetaSync) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaSync.ProtoReflect.Descriptor instead.
func (*MetaSync) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{26}
}

type ReportEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonRequestHeader     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Events []*ReportEventRequest_Event `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *ReportEventRequest) Reset() {
	*x = ReportEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportEventRequest) ProtoMessage() {}

func (x *ReportEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportEventRequest.ProtoReflect.Descriptor instead.
func (*ReportEventRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{27}
}

func (x *ReportEventRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ReportEventRequest) GetEvents() []*ReportEventRequest_Event {
	if x != nil {
		return x.Events
	}
	return nil
}

type MetaSync_FullSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// deprecated
	// string temp = 2 ;
	Workspace string               `protobuf:"bytes,3,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Type      string               `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Resource  []*MetaSync_Resource `protobuf:"bytes,5,rep,name=resource,proto3" json:"resource,omitempty"`
	Cluster   string               `protobuf:"bytes,6,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *MetaSync_FullSyncRequest) Reset() {
	*x = MetaSync_FullSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaSync_FullSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaSync_FullSyncRequest) ProtoMessage() {}

func (x *MetaSync_FullSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaSync_FullSyncRequest.ProtoReflect.Descriptor instead.
func (*MetaSync_FullSyncRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{26, 0}
}

func (x *MetaSync_FullSyncRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MetaSync_FullSyncRequest) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *MetaSync_FullSyncRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MetaSync_FullSyncRequest) GetResource() []*MetaSync_Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *MetaSync_FullSyncRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

type MetaSync_DeltaSyncRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// deprecated
	// string temp = 2;
	Workspace string               `protobuf:"bytes,3,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Type      string               `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Add       []*MetaSync_Resource `protobuf:"bytes,5,rep,name=add,proto3" json:"add,omitempty"`
	Del       []*MetaSync_Resource `protobuf:"bytes,6,rep,name=del,proto3" json:"del,omitempty"`
	Cluster   string               `protobuf:"bytes,7,opt,name=cluster,proto3" json:"cluster,omitempty"`
}

func (x *MetaSync_DeltaSyncRequest) Reset() {
	*x = MetaSync_DeltaSyncRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaSync_DeltaSyncRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaSync_DeltaSyncRequest) ProtoMessage() {}

func (x *MetaSync_DeltaSyncRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaSync_DeltaSyncRequest.ProtoReflect.Descriptor instead.
func (*MetaSync_DeltaSyncRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{26, 1}
}

func (x *MetaSync_DeltaSyncRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MetaSync_DeltaSyncRequest) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *MetaSync_DeltaSyncRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MetaSync_DeltaSyncRequest) GetAdd() []*MetaSync_Resource {
	if x != nil {
		return x.Add
	}
	return nil
}

func (x *MetaSync_DeltaSyncRequest) GetDel() []*MetaSync_Resource {
	if x != nil {
		return x.Del
	}
	return nil
}

func (x *MetaSync_DeltaSyncRequest) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

type MetaSync_Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace   string            `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Labels      map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Annotations map[string]string `protobuf:"bytes,4,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 下面几个指标, 并不是每种 resource 都有
	App      string `protobuf:"bytes,5,opt,name=app,proto3" json:"app,omitempty"`
	Ip       string `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	Hostname string `protobuf:"bytes,7,opt,name=hostname,proto3" json:"hostname,omitempty"`
	HostIP   string `protobuf:"bytes,8,opt,name=hostIP,proto3" json:"hostIP,omitempty"`
	// 通用字段, 需要根据type来解释
	Spec map[string]string `protobuf:"bytes,9,rep,name=spec,proto3" json:"spec,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetaSync_Resource) Reset() {
	*x = MetaSync_Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetaSync_Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaSync_Resource) ProtoMessage() {}

func (x *MetaSync_Resource) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaSync_Resource.ProtoReflect.Descriptor instead.
func (*MetaSync_Resource) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{26, 2}
}

func (x *MetaSync_Resource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetaSync_Resource) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *MetaSync_Resource) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *MetaSync_Resource) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

func (x *MetaSync_Resource) GetApp() string {
	if x != nil {
		return x.App
	}
	return ""
}

func (x *MetaSync_Resource) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *MetaSync_Resource) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *MetaSync_Resource) GetHostIP() string {
	if x != nil {
		return x.HostIP
	}
	return ""
}

func (x *MetaSync_Resource) GetSpec() map[string]string {
	if x != nil {
		return x.Spec
	}
	return nil
}

type ReportEventRequest_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// event time
	BornTimestamp  int64 `protobuf:"varint,1,opt,name=born_timestamp,json=bornTimestamp,proto3" json:"born_timestamp,omitempty"`
	EventTimestamp int64 `protobuf:"varint,2,opt,name=event_timestamp,json=eventTimestamp,proto3" json:"event_timestamp,omitempty"`
	// event type: STAT/DIGEST/DEBUG
	// STAT: reports some Statistical indicators. strings must be empty.
	// DIGEST: reports important events when running. It can have numbers and strings
	// DEBUG: like digest, but only reported when debug mode is enabled.
	// LOG: logs
	EventType string `protobuf:"bytes,3,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// event payload type
	PayloadType string `protobuf:"bytes,4,opt,name=payload_type,json=payloadType,proto3" json:"payload_type,omitempty"`
	// event tags, such tenant,agentIp,targetIp
	// event tags, numbers, and strings maps must have different keys.
	Tags map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// event numbers
	Numbers map[string]int64 `protobuf:"bytes,6,rep,name=numbers,proto3" json:"numbers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// event strings
	Strings map[string]string `protobuf:"bytes,7,rep,name=strings,proto3" json:"strings,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Logs    []string          `protobuf:"bytes,8,rep,name=logs,proto3" json:"logs,omitempty"`
	Json    string            `protobuf:"bytes,9,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *ReportEventRequest_Event) Reset() {
	*x = ReportEventRequest_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_agent_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportEventRequest_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportEventRequest_Event) ProtoMessage() {}

func (x *ReportEventRequest_Event) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_agent_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportEventRequest_Event.ProtoReflect.Descriptor instead.
func (*ReportEventRequest_Event) Descriptor() ([]byte, []int) {
	return file_registry_for_agent_proto_rawDescGZIP(), []int{27, 0}
}

func (x *ReportEventRequest_Event) GetBornTimestamp() int64 {
	if x != nil {
		return x.BornTimestamp
	}
	return 0
}

func (x *ReportEventRequest_Event) GetEventTimestamp() int64 {
	if x != nil {
		return x.EventTimestamp
	}
	return 0
}

func (x *ReportEventRequest_Event) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *ReportEventRequest_Event) GetPayloadType() string {
	if x != nil {
		return x.PayloadType
	}
	return ""
}

func (x *ReportEventRequest_Event) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ReportEventRequest_Event) GetNumbers() map[string]int64 {
	if x != nil {
		return x.Numbers
	}
	return nil
}

func (x *ReportEventRequest_Event) GetStrings() map[string]string {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *ReportEventRequest_Event) GetLogs() []string {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *ReportEventRequest_Event) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

var File_registry_for_agent_proto protoreflect.FileDescriptor

var file_registry_for_agent_proto_rawDesc = []byte{
	0x0a, 0x18, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x2d, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x69, 0x6f, 0x2e, 0x68,
	0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x7b, 0x0a, 0x0b, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x22, 0xcc, 0x01,
	0x0a, 0x0c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x32, 0x12, 0x50,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x50, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x0d,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c,
	0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x01, 0x0a, 0x14, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x05,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x1a,
	0x38, 0x0a, 0x0a, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbf, 0x04, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x72, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x63, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x4b, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x49, 0x0a, 0x03, 0x6b, 0x38, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4b, 0x38, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x6b, 0x38,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x39, 0x0a,
	0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7c, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4b, 0x38, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x6f,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x19, 0x53, 0x65,
	0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c,
	0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x22, 0x6d, 0x0a, 0x1a, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xa2, 0x02, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c,
	0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x59, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xbb,
	0x01, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3c,
	0x0a, 0x1a, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x18, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x41, 0x0a, 0x1d, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1a, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x94, 0x01, 0x0a,
	0x0b, 0x44, 0x65, 0x62, 0x75, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x6f, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xa9, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x68, 0x0a, 0x07, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xce, 0x06, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x07,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4f, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x7f, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x56, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x7f, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x56, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x1a, 0x7b, 0x0a, 0x0c, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x55, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x7b, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x4e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x7b, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xce, 0x03, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x75, 0x0a,
	0x0f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x79, 0x0a, 0x18, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x15, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a,
	0x40, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xd3, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x38, 0x0a,
	0x0a, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x62, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xca, 0x01, 0x0a, 0x10,
	0x52, 0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x08, 0x52, 0x75, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x63, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x55, 0x0a,
	0x1e, 0x42, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x1f, 0x42, 0x69, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c,
	0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xdd, 0x09, 0x0a, 0x08, 0x4d, 0x65, 0x74,
	0x61, 0x53, 0x79, 0x6e, 0x63, 0x1a, 0x87, 0x02, 0x0a, 0x0f, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x79,
	0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x79,
	0x6e, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a,
	0xce, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x4e, 0x0a, 0x03, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x03, 0x64, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x1a, 0xf5, 0x04, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x60, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x53, 0x79, 0x6e, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x6f, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x70, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x50, 0x12, 0x5a, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x37, 0x0a, 0x09, 0x53, 0x70, 0x65, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf1, 0x06, 0x0a, 0x12, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x5b, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x43, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xad, 0x05, 0x0a,
	0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f, 0x72, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x62, 0x6f, 0x72, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x27, 0x0a,
	0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x6a, 0x0a, 0x07, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x6a, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f,
	0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x1a, 0x37, 0x0a, 0x09, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xc4, 0x0b, 0x0a,
	0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x46, 0x6f, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x14, 0x73,
	0x65, 0x6e, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x12, 0x44, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x75,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8e, 0x01, 0x0a, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x52, 0x75, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x75,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xa2, 0x01, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x43, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44,
	0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x41, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x42, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0a, 0x62, 0x69, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x12, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52,
	0x70, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x70, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x6f, 0x0a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x43, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c,
	0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x2e, 0x46, 0x75, 0x6c,
	0x6c, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x44, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x2e, 0x44,
	0x65, 0x6c, 0x74, 0x61, 0x53, 0x79, 0x6e, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0d, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x42, 0x86, 0x01, 0x0a, 0x29, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x42, 0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x50, 0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x61, 0x73, 0x2d, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2f, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_registry_for_agent_proto_rawDescOnce sync.Once
	file_registry_for_agent_proto_rawDescData = file_registry_for_agent_proto_rawDesc
)

func file_registry_for_agent_proto_rawDescGZIP() []byte {
	file_registry_for_agent_proto_rawDescOnce.Do(func() {
		file_registry_for_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_registry_for_agent_proto_rawDescData)
	})
	return file_registry_for_agent_proto_rawDescData
}

var file_registry_for_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_registry_for_agent_proto_goTypes = []interface{}{
	(*CollectTask)(nil),                     // 0: io.holoinsight.server.registry.grpc.agent.CollectTask
	(*CollectTask2)(nil),                    // 1: io.holoinsight.server.registry.grpc.agent.CollectTask2
	(*CollectConfig)(nil),                   // 2: io.holoinsight.server.registry.grpc.agent.CollectConfig
	(*CollectTarget)(nil),                   // 3: io.holoinsight.server.registry.grpc.agent.CollectTarget
	(*CollectConfigsBucket)(nil),            // 4: io.holoinsight.server.registry.grpc.agent.CollectConfigsBucket
	(*Agent)(nil),                           // 5: io.holoinsight.server.registry.grpc.agent.Agent
	(*ProcessingError)(nil),                 // 6: io.holoinsight.server.registry.grpc.agent.ProcessingError
	(*RegisterAgentRequest)(nil),            // 7: io.holoinsight.server.registry.grpc.agent.RegisterAgentRequest
	(*AgentK8SInfo)(nil),                    // 8: io.holoinsight.server.registry.grpc.agent.AgentK8sInfo
	(*RegisterAgentResponse)(nil),           // 9: io.holoinsight.server.registry.grpc.agent.RegisterAgentResponse
	(*SendAgentHeartbeatRequest)(nil),       // 10: io.holoinsight.server.registry.grpc.agent.SendAgentHeartbeatRequest
	(*SendAgentHeartbeatResponse)(nil),      // 11: io.holoinsight.server.registry.grpc.agent.SendAgentHeartbeatResponse
	(*GetControlConfigsRequest)(nil),        // 12: io.holoinsight.server.registry.grpc.agent.GetControlConfigsRequest
	(*GetControlConfigsResponse)(nil),       // 13: io.holoinsight.server.registry.grpc.agent.GetControlConfigsResponse
	(*BasicConfig)(nil),                     // 14: io.holoinsight.server.registry.grpc.agent.BasicConfig
	(*DebugConfig)(nil),                     // 15: io.holoinsight.server.registry.grpc.agent.DebugConfig
	(*GetCollectTasksRequest)(nil),          // 16: io.holoinsight.server.registry.grpc.agent.GetCollectTasksRequest
	(*GetCollectTasksResponse)(nil),         // 17: io.holoinsight.server.registry.grpc.agent.GetCollectTasksResponse
	(*RunStatsRequest)(nil),                 // 18: io.holoinsight.server.registry.grpc.agent.RunStatsRequest
	(*CollectConfigRunStats)(nil),           // 19: io.holoinsight.server.registry.grpc.agent.CollectConfigRunStats
	(*RunStatsResponse)(nil),                // 20: io.holoinsight.server.registry.grpc.agent.RunStatsResponse
	(*RunEventsRequest)(nil),                // 21: io.holoinsight.server.registry.grpc.agent.RunEventsRequest
	(*RunEvent)(nil),                        // 22: io.holoinsight.server.registry.grpc.agent.RunEvent
	(*RunEventsResponse)(nil),               // 23: io.holoinsight.server.registry.grpc.agent.RunEventsResponse
	(*BiStreamClientHandshakeRequest)(nil),  // 24: io.holoinsight.server.registry.grpc.agent.BiStreamClientHandshakeRequest
	(*BiStreamClientHandshakeResponse)(nil), // 25: io.holoinsight.server.registry.grpc.agent.BiStreamClientHandshakeResponse
	(*MetaSync)(nil),                        // 26: io.holoinsight.server.registry.grpc.agent.MetaSync
	(*ReportEventRequest)(nil),              // 27: io.holoinsight.server.registry.grpc.agent.ReportEventRequest
	nil,                                     // 28: io.holoinsight.server.registry.grpc.agent.CollectTarget.MetaEntry
	nil,                                     // 29: io.holoinsight.server.registry.grpc.agent.Agent.OtherEntry
	nil,                                     // 30: io.holoinsight.server.registry.grpc.agent.RegisterAgentRequest.LabelsEntry
	nil,                                     // 31: io.holoinsight.server.registry.grpc.agent.GetCollectTasksRequest.BucketsEntry
	nil,                                     // 32: io.holoinsight.server.registry.grpc.agent.GetCollectTasksResponse.BucketsEntry
	nil,                                     // 33: io.holoinsight.server.registry.grpc.agent.GetCollectTasksResponse.CollectConfigsEntry
	nil,                                     // 34: io.holoinsight.server.registry.grpc.agent.GetCollectTasksResponse.CollectTargetsEntry
	nil,                                     // 35: io.holoinsight.server.registry.grpc.agent.RunStatsRequest.AgentRunStatsEntry
	nil,                                     // 36: io.holoinsight.server.registry.grpc.agent.CollectConfigRunStats.StatsEntry
	(*MetaSync_FullSyncRequest)(nil),        // 37: io.holoinsight.server.registry.grpc.agent.MetaSync.FullSyncRequest
	(*MetaSync_DeltaSyncRequest)(nil),       // 38: io.holoinsight.server.registry.grpc.agent.MetaSync.DeltaSyncRequest
	(*MetaSync_Resource)(nil),               // 39: io.holoinsight.server.registry.grpc.agent.MetaSync.Resource
	nil,                                     // 40: io.holoinsight.server.registry.grpc.agent.MetaSync.Resource.LabelsEntry
	nil,                                     // 41: io.holoinsight.server.registry.grpc.agent.MetaSync.Resource.AnnotationsEntry
	nil,                                     // 42: io.holoinsight.server.registry.grpc.agent.MetaSync.Resource.SpecEntry
	(*ReportEventRequest_Event)(nil),        // 43: io.holoinsight.server.registry.grpc.agent.ReportEventRequest.Event
	nil,                                     // 44: io.holoinsight.server.registry.grpc.agent.ReportEventRequest.Event.TagsEntry
	nil,                                     // 45: io.holoinsight.server.registry.grpc.agent.ReportEventRequest.Event.NumbersEntry
	nil,                                     // 46: io.holoinsight.server.registry.grpc.agent.ReportEventRequest.Event.StringsEntry
	(*pb.CommonRequestHeader)(nil),          // 47: io.holoinsight.server.common.grpc.CommonRequestHeader
	(*pb.CommonResponseHeader)(nil),         // 48: io.holoinsight.server.common.grpc.CommonResponseHeader
	(*emptypb.Empty)(nil),                   // 49: google.protobuf.Empty
	(*pb.GenericRpcCommand)(nil),            // 50: io.holoinsight.server.common.grpc.GenericRpcCommand
}
var file_registry_for_agent_proto_depIdxs = []int32{
	2,  // 0: io.holoinsight.server.registry.grpc.agent.CollectTask2.config:type_name -> io.holoinsight.server.registry.grpc.agent.CollectConfig
	3,  // 1: io.holoinsight.server.registry.grpc.agent.CollectTask2.target:type_name -> io.holoinsight.server.registry.grpc.agent.CollectTarget
	28, // 2: io.holoinsight.server.registry.grpc.agent.CollectTarget.meta:type_name -> io.holoinsight.server.registry.grpc.agent.CollectTarget.MetaEntry
	0,  // 3: io.holoinsight.server.registry.grpc.agent.CollectConfigsBucket.collect_tasks:type_name -> io.holoinsight.server.registry.grpc.agent.CollectTask
	29, // 4: io.holoinsight.server.registry.grpc.agent.Agent.other:type_name -> io.holoinsight.server.registry.grpc.agent.Agent.OtherEntry
	47, // 5: io.holoinsight.server.registry.grpc.agent.RegisterAgentRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	30, // 6: io.holoinsight.server.registry.grpc.agent.RegisterAgentRequest.labels:type_name -> io.holoinsight.server.registry.grpc.agent.RegisterAgentRequest.LabelsEntry
	8,  // 7: io.holoinsight.server.registry.grpc.agent.RegisterAgentRequest.k8s:type_name -> io.holoinsight.server.registry.grpc.agent.AgentK8sInfo
	48, // 8: io.holoinsight.server.registry.grpc.agent.RegisterAgentResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonResponseHeader
	47, // 9: io.holoinsight.server.registry.grpc.agent.SendAgentHeartbeatRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	48, // 10: io.holoinsight.server.registry.grpc.agent.SendAgentHeartbeatResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonResponseHeader
	47, // 11: io.holoinsight.server.registry.grpc.agent.GetControlConfigsRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	48, // 12: io.holoinsight.server.registry.grpc.agent.GetControlConfigsResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonResponseHeader
	14, // 13: io.holoinsight.server.registry.grpc.agent.GetControlConfigsResponse.basic_config:type_name -> io.holoinsight.server.registry.grpc.agent.BasicConfig
	15, // 14: io.holoinsight.server.registry.grpc.agent.GetControlConfigsResponse.debug_config:type_name -> io.holoinsight.server.registry.grpc.agent.DebugConfig
	47, // 15: io.holoinsight.server.registry.grpc.agent.GetCollectTasksRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	31, // 16: io.holoinsight.server.registry.grpc.agent.GetCollectTasksRequest.buckets:type_name -> io.holoinsight.server.registry.grpc.agent.GetCollectTasksRequest.BucketsEntry
	48, // 17: io.holoinsight.server.registry.grpc.agent.GetCollectTasksResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonResponseHeader
	32, // 18: io.holoinsight.server.registry.grpc.agent.GetCollectTasksResponse.buckets:type_name -> io.holoinsight.server.registry.grpc.agent.GetCollectTasksResponse.BucketsEntry
	33, // 19: io.holoinsight.server.registry.grpc.agent.GetCollectTasksResponse.collect_configs:type_name -> io.holoinsight.server.registry.grpc.agent.GetCollectTasksResponse.CollectConfigsEntry
	34, // 20: io.holoinsight.server.registry.grpc.agent.GetCollectTasksResponse.collect_targets:type_name -> io.holoinsight.server.registry.grpc.agent.GetCollectTasksResponse.CollectTargetsEntry
	47, // 21: io.holoinsight.server.registry.grpc.agent.RunStatsRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	35, // 22: io.holoinsight.server.registry.grpc.agent.RunStatsRequest.agent_run_stats:type_name -> io.holoinsight.server.registry.grpc.agent.RunStatsRequest.AgentRunStatsEntry
	19, // 23: io.holoinsight.server.registry.grpc.agent.RunStatsRequest.collect_config_run_stats:type_name -> io.holoinsight.server.registry.grpc.agent.CollectConfigRunStats
	36, // 24: io.holoinsight.server.registry.grpc.agent.CollectConfigRunStats.stats:type_name -> io.holoinsight.server.registry.grpc.agent.CollectConfigRunStats.StatsEntry
	47, // 25: io.holoinsight.server.registry.grpc.agent.RunStatsResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	47, // 26: io.holoinsight.server.registry.grpc.agent.RunEventsRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	22, // 27: io.holoinsight.server.registry.grpc.agent.RunEventsRequest.events:type_name -> io.holoinsight.server.registry.grpc.agent.RunEvent
	47, // 28: io.holoinsight.server.registry.grpc.agent.RunEventsResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	48, // 29: io.holoinsight.server.registry.grpc.agent.BiStreamClientHandshakeResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonResponseHeader
	47, // 30: io.holoinsight.server.registry.grpc.agent.ReportEventRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	43, // 31: io.holoinsight.server.registry.grpc.agent.ReportEventRequest.events:type_name -> io.holoinsight.server.registry.grpc.agent.ReportEventRequest.Event
	4,  // 32: io.holoinsight.server.registry.grpc.agent.GetCollectTasksResponse.BucketsEntry.value:type_name -> io.holoinsight.server.registry.grpc.agent.CollectConfigsBucket
	2,  // 33: io.holoinsight.server.registry.grpc.agent.GetCollectTasksResponse.CollectConfigsEntry.value:type_name -> io.holoinsight.server.registry.grpc.agent.CollectConfig
	3,  // 34: io.holoinsight.server.registry.grpc.agent.GetCollectTasksResponse.CollectTargetsEntry.value:type_name -> io.holoinsight.server.registry.grpc.agent.CollectTarget
	47, // 35: io.holoinsight.server.registry.grpc.agent.MetaSync.FullSyncRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	39, // 36: io.holoinsight.server.registry.grpc.agent.MetaSync.FullSyncRequest.resource:type_name -> io.holoinsight.server.registry.grpc.agent.MetaSync.Resource
	47, // 37: io.holoinsight.server.registry.grpc.agent.MetaSync.DeltaSyncRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	39, // 38: io.holoinsight.server.registry.grpc.agent.MetaSync.DeltaSyncRequest.add:type_name -> io.holoinsight.server.registry.grpc.agent.MetaSync.Resource
	39, // 39: io.holoinsight.server.registry.grpc.agent.MetaSync.DeltaSyncRequest.del:type_name -> io.holoinsight.server.registry.grpc.agent.MetaSync.Resource
	40, // 40: io.holoinsight.server.registry.grpc.agent.MetaSync.Resource.labels:type_name -> io.holoinsight.server.registry.grpc.agent.MetaSync.Resource.LabelsEntry
	41, // 41: io.holoinsight.server.registry.grpc.agent.MetaSync.Resource.annotations:type_name -> io.holoinsight.server.registry.grpc.agent.MetaSync.Resource.AnnotationsEntry
	42, // 42: io.holoinsight.server.registry.grpc.agent.MetaSync.Resource.spec:type_name -> io.holoinsight.server.registry.grpc.agent.MetaSync.Resource.SpecEntry
	44, // 43: io.holoinsight.server.registry.grpc.agent.ReportEventRequest.Event.tags:type_name -> io.holoinsight.server.registry.grpc.agent.ReportEventRequest.Event.TagsEntry
	45, // 44: io.holoinsight.server.registry.grpc.agent.ReportEventRequest.Event.numbers:type_name -> io.holoinsight.server.registry.grpc.agent.ReportEventRequest.Event.NumbersEntry
	46, // 45: io.holoinsight.server.registry.grpc.agent.ReportEventRequest.Event.strings:type_name -> io.holoinsight.server.registry.grpc.agent.ReportEventRequest.Event.StringsEntry
	49, // 46: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.ping:input_type -> google.protobuf.Empty
	7,  // 47: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.register_agent:input_type -> io.holoinsight.server.registry.grpc.agent.RegisterAgentRequest
	10, // 48: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.send_agent_heartbeat:input_type -> io.holoinsight.server.registry.grpc.agent.SendAgentHeartbeatRequest
	18, // 49: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.send_run_stats:input_type -> io.holoinsight.server.registry.grpc.agent.RunStatsRequest
	21, // 50: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.send_run_events:input_type -> io.holoinsight.server.registry.grpc.agent.RunEventsRequest
	12, // 51: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.get_control_configs:input_type -> io.holoinsight.server.registry.grpc.agent.GetControlConfigsRequest
	16, // 52: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.get_collect_tasks:input_type -> io.holoinsight.server.registry.grpc.agent.GetCollectTasksRequest
	50, // 53: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.bi_streams:input_type -> io.holoinsight.server.common.grpc.GenericRpcCommand
	37, // 54: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.meta_full_sync:input_type -> io.holoinsight.server.registry.grpc.agent.MetaSync.FullSyncRequest
	38, // 55: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.meta_delta_sync:input_type -> io.holoinsight.server.registry.grpc.agent.MetaSync.DeltaSyncRequest
	27, // 56: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.report_events:input_type -> io.holoinsight.server.registry.grpc.agent.ReportEventRequest
	49, // 57: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.ping:output_type -> google.protobuf.Empty
	9,  // 58: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.register_agent:output_type -> io.holoinsight.server.registry.grpc.agent.RegisterAgentResponse
	11, // 59: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.send_agent_heartbeat:output_type -> io.holoinsight.server.registry.grpc.agent.SendAgentHeartbeatResponse
	20, // 60: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.send_run_stats:output_type -> io.holoinsight.server.registry.grpc.agent.RunStatsResponse
	23, // 61: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.send_run_events:output_type -> io.holoinsight.server.registry.grpc.agent.RunEventsResponse
	13, // 62: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.get_control_configs:output_type -> io.holoinsight.server.registry.grpc.agent.GetControlConfigsResponse
	17, // 63: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.get_collect_tasks:output_type -> io.holoinsight.server.registry.grpc.agent.GetCollectTasksResponse
	50, // 64: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.bi_streams:output_type -> io.holoinsight.server.common.grpc.GenericRpcCommand
	49, // 65: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.meta_full_sync:output_type -> google.protobuf.Empty
	49, // 66: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.meta_delta_sync:output_type -> google.protobuf.Empty
	49, // 67: io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent.report_events:output_type -> google.protobuf.Empty
	57, // [57:68] is the sub-list for method output_type
	46, // [46:57] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_registry_for_agent_proto_init() }
func file_registry_for_agent_proto_init() {
	if File_registry_for_agent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_registry_for_agent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectTask2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectConfigsBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Agent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessingError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterAgentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentK8SInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterAgentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendAgentHeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendAgentHeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetControlConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetControlConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCollectTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectConfigRunStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BiStreamClientHandshakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BiStreamClientHandshakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaSync_FullSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaSync_DeltaSyncRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetaSync_Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_agent_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportEventRequest_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_registry_for_agent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_registry_for_agent_proto_goTypes,
		DependencyIndexes: file_registry_for_agent_proto_depIdxs,
		MessageInfos:      file_registry_for_agent_proto_msgTypes,
	}.Build()
	File_registry_for_agent_proto = out.File
	file_registry_for_agent_proto_rawDesc = nil
	file_registry_for_agent_proto_goTypes = nil
	file_registry_for_agent_proto_depIdxs = nil
}
