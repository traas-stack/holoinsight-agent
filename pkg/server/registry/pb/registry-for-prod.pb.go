/*
 * Copyright 2022 Holoinsight Project Authors. Licensed under Apache-2.0.
 */

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: registry-for-prod.proto

package pb

import (
	pb "github.com/traas-stack/holoinsight-agent/pkg/server/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TargetIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tenant   string `protobuf:"bytes,1,opt,name=tenant,proto3" json:"tenant,omitempty"`
	TargetUk string `protobuf:"bytes,2,opt,name=target_uk,json=targetUk,proto3" json:"target_uk,omitempty"`
}

func (x *TargetIdentifier) Reset() {
	*x = TargetIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetIdentifier) ProtoMessage() {}

func (x *TargetIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetIdentifier.ProtoReflect.Descriptor instead.
func (*TargetIdentifier) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{0}
}

func (x *TargetIdentifier) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *TargetIdentifier) GetTargetUk() string {
	if x != nil {
		return x.TargetUk
	}
	return ""
}

// 通知配置变更
type NotifyCollectConfigUpdatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 以下参数二选一
	// 涉及的id
	Ids []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
	// 变更的表名
	TableNames []string `protobuf:"bytes,3,rep,name=table_names,json=tableNames,proto3" json:"table_names,omitempty"`
}

func (x *NotifyCollectConfigUpdatedRequest) Reset() {
	*x = NotifyCollectConfigUpdatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyCollectConfigUpdatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyCollectConfigUpdatedRequest) ProtoMessage() {}

func (x *NotifyCollectConfigUpdatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyCollectConfigUpdatedRequest.ProtoReflect.Descriptor instead.
func (*NotifyCollectConfigUpdatedRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{1}
}

func (x *NotifyCollectConfigUpdatedRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *NotifyCollectConfigUpdatedRequest) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *NotifyCollectConfigUpdatedRequest) GetTableNames() []string {
	if x != nil {
		return x.TableNames
	}
	return nil
}

type NotifyCollectConfigUpdatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *NotifyCollectConfigUpdatedResponse) Reset() {
	*x = NotifyCollectConfigUpdatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotifyCollectConfigUpdatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotifyCollectConfigUpdatedResponse) ProtoMessage() {}

func (x *NotifyCollectConfigUpdatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotifyCollectConfigUpdatedResponse.ProtoReflect.Descriptor instead.
func (*NotifyCollectConfigUpdatedResponse) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{2}
}

func (x *NotifyCollectConfigUpdatedResponse) GetHeader() *pb.CommonResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type ListFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// request header
	Header *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// agent id
	AgentId string `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// dir path
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// max depths
	MaxDepth    int32    `protobuf:"varint,4,opt,name=max_depth,json=maxDepth,proto3" json:"max_depth,omitempty"`
	IncludeExts []string `protobuf:"bytes,5,rep,name=include_exts,json=includeExts,proto3" json:"include_exts,omitempty"`
	// 如果为true则显示父目录
	IncludeParents bool `protobuf:"varint,6,opt,name=include_parents,json=includeParents,proto3" json:"include_parents,omitempty"`
}

func (x *ListFilesRequest) Reset() {
	*x = ListFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesRequest) ProtoMessage() {}

func (x *ListFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesRequest.ProtoReflect.Descriptor instead.
func (*ListFilesRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{3}
}

func (x *ListFilesRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListFilesRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *ListFilesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListFilesRequest) GetMaxDepth() int32 {
	if x != nil {
		return x.MaxDepth
	}
	return 0
}

func (x *ListFilesRequest) GetIncludeExts() []string {
	if x != nil {
		return x.IncludeExts
	}
	return nil
}

func (x *ListFilesRequest) GetIncludeParents() bool {
	if x != nil {
		return x.IncludeParents
	}
	return false
}

type ListFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Nodes  []*pb.FileNode           `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ListFilesResponse) Reset() {
	*x = ListFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFilesResponse) ProtoMessage() {}

func (x *ListFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFilesResponse.ProtoReflect.Descriptor instead.
func (*ListFilesResponse) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{4}
}

func (x *ListFilesResponse) GetHeader() *pb.CommonResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListFilesResponse) GetNodes() []*pb.FileNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type PreviewFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AgentId string                  `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// 日志路径
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// 如果没有提供编码则agent会猜测编码
	Charset string `protobuf:"bytes,4,opt,name=charset,proto3" json:"charset,omitempty"`
	// 最多的行数
	MaxLines int32 `protobuf:"varint,5,opt,name=maxLines,proto3" json:"maxLines,omitempty"`
	// 最多的字节数
	MaxBytes int32 `protobuf:"varint,6,opt,name=maxBytes,proto3" json:"maxBytes,omitempty"`
}

func (x *PreviewFileRequest) Reset() {
	*x = PreviewFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewFileRequest) ProtoMessage() {}

func (x *PreviewFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewFileRequest.ProtoReflect.Descriptor instead.
func (*PreviewFileRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{5}
}

func (x *PreviewFileRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PreviewFileRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *PreviewFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PreviewFileRequest) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

func (x *PreviewFileRequest) GetMaxLines() int32 {
	if x != nil {
		return x.MaxLines
	}
	return 0
}

func (x *PreviewFileRequest) GetMaxBytes() int32 {
	if x != nil {
		return x.MaxBytes
	}
	return 0
}

type PreviewFileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 解析好的日志行
	Content []string `protobuf:"bytes,2,rep,name=content,proto3" json:"content,omitempty"`
	// 日志使用的编码
	// 如果用户请求里没有提供编码, 那么此时该编码是猜测的编码
	Charset string `protobuf:"bytes,3,opt,name=charset,proto3" json:"charset,omitempty"`
}

func (x *PreviewFileResponse) Reset() {
	*x = PreviewFileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PreviewFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewFileResponse) ProtoMessage() {}

func (x *PreviewFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewFileResponse.ProtoReflect.Descriptor instead.
func (*PreviewFileResponse) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{6}
}

func (x *PreviewFileResponse) GetHeader() *pb.CommonResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PreviewFileResponse) GetContent() []string {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *PreviewFileResponse) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

// 试切分
type SplitLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AgentId string                  `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Content string                  `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Regexp  string                  `protobuf:"bytes,4,opt,name=regexp,proto3" json:"regexp,omitempty"`
}

func (x *SplitLogRequest) Reset() {
	*x = SplitLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitLogRequest) ProtoMessage() {}

func (x *SplitLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitLogRequest.ProtoReflect.Descriptor instead.
func (*SplitLogRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{7}
}

func (x *SplitLogRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SplitLogRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *SplitLogRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SplitLogRequest) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

type SplitLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result map[string]string        `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SplitLogResponse) Reset() {
	*x = SplitLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitLogResponse) ProtoMessage() {}

func (x *SplitLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitLogResponse.ProtoReflect.Descriptor instead.
func (*SplitLogResponse) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{8}
}

func (x *SplitLogResponse) GetHeader() *pb.CommonResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SplitLogResponse) GetResult() map[string]string {
	if x != nil {
		return x.Result
	}
	return nil
}

type InspectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AgentId string                  `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (x *InspectRequest) Reset() {
	*x = InspectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectRequest) ProtoMessage() {}

func (x *InspectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectRequest.ProtoReflect.Descriptor instead.
func (*InspectRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{9}
}

func (x *InspectRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *InspectRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

type InspectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Result string                   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *InspectResponse) Reset() {
	*x = InspectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectResponse) ProtoMessage() {}

func (x *InspectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectResponse.ProtoReflect.Descriptor instead.
func (*InspectResponse) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{10}
}

func (x *InspectResponse) GetHeader() *pb.CommonResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *InspectResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type MatchFilesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AgentId string                  `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	// path/format/glob/regexp
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// used when type in (path,format,glob,regexp)
	Pattern string `protobuf:"bytes,4,opt,name=pattern,proto3" json:"pattern,omitempty"`
	// used when type=regexp
	Dir string `protobuf:"bytes,5,opt,name=dir,proto3" json:"dir,omitempty"`
	// used when glob&regexp
	MaxVisited int32 `protobuf:"varint,6,opt,name=maxVisited,proto3" json:"maxVisited,omitempty"`
	// used when glob&regexp
	MaxMatched int32 `protobuf:"varint,7,opt,name=maxMatched,proto3" json:"maxMatched,omitempty"`
}

func (x *MatchFilesRequest) Reset() {
	*x = MatchFilesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchFilesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchFilesRequest) ProtoMessage() {}

func (x *MatchFilesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchFilesRequest.ProtoReflect.Descriptor instead.
func (*MatchFilesRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{11}
}

func (x *MatchFilesRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MatchFilesRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *MatchFilesRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MatchFilesRequest) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *MatchFilesRequest) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *MatchFilesRequest) GetMaxVisited() int32 {
	if x != nil {
		return x.MaxVisited
	}
	return 0
}

func (x *MatchFilesRequest) GetMaxMatched() int32 {
	if x != nil {
		return x.MaxMatched
	}
	return 0
}

type MatchFilesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *pb.CommonResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Files   []string                 `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
	Visited int32                    `protobuf:"varint,3,opt,name=visited,proto3" json:"visited,omitempty"`
}

func (x *MatchFilesResponse) Reset() {
	*x = MatchFilesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchFilesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchFilesResponse) ProtoMessage() {}

func (x *MatchFilesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchFilesResponse.ProtoReflect.Descriptor instead.
func (*MatchFilesResponse) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{12}
}

func (x *MatchFilesResponse) GetHeader() *pb.CommonResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MatchFilesResponse) GetFiles() []string {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *MatchFilesResponse) GetVisited() int32 {
	if x != nil {
		return x.Visited
	}
	return 0
}

// dry run
type DryRunRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// common request header
	Header *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 配置信息
	Config *DryRunRequest_CollectConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	// 最终运行的目标, 在元数据里必须能找到
	Target *TargetIdentifier `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// 输入信息
	Input *DryRunRequest_Input `protobuf:"bytes,4,opt,name=input,proto3" json:"input,omitempty"`
}

func (x *DryRunRequest) Reset() {
	*x = DryRunRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DryRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DryRunRequest) ProtoMessage() {}

func (x *DryRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DryRunRequest.ProtoReflect.Descriptor instead.
func (*DryRunRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{13}
}

func (x *DryRunRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DryRunRequest) GetConfig() *DryRunRequest_CollectConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *DryRunRequest) GetTarget() *TargetIdentifier {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *DryRunRequest) GetInput() *DryRunRequest_Input {
	if x != nil {
		return x.Input
	}
	return nil
}

type DryRunResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *pb.CommonResponseHeader      `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Event        *DryRunResponse_Event         `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	GroupResults []*DryRunResponse_GroupResult `protobuf:"bytes,3,rep,name=group_results,json=groupResults,proto3" json:"group_results,omitempty"`
}

func (x *DryRunResponse) Reset() {
	*x = DryRunResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DryRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DryRunResponse) ProtoMessage() {}

func (x *DryRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DryRunResponse.ProtoReflect.Descriptor instead.
func (*DryRunResponse) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{14}
}

func (x *DryRunResponse) GetHeader() *pb.CommonResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DryRunResponse) GetEvent() *DryRunResponse_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *DryRunResponse) GetGroupResults() []*DryRunResponse_GroupResult {
	if x != nil {
		return x.GroupResults
	}
	return nil
}

type HttpProxyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AgentId string                  `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	//TargetIdentifier target = 3;
	Method  string            `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	Url     string            `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Headers map[string]string `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body    []byte            `protobuf:"bytes,7,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *HttpProxyRequest) Reset() {
	*x = HttpProxyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpProxyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpProxyRequest) ProtoMessage() {}

func (x *HttpProxyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpProxyRequest.ProtoReflect.Descriptor instead.
func (*HttpProxyRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{15}
}

func (x *HttpProxyRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *HttpProxyRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *HttpProxyRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HttpProxyRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *HttpProxyRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpProxyRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type HttpProxyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *pb.CommonResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Code    int32                    `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Headers map[string]string        `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body    []byte                   `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	Cost    int32                    `protobuf:"varint,5,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *HttpProxyResponse) Reset() {
	*x = HttpProxyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpProxyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpProxyResponse) ProtoMessage() {}

func (x *HttpProxyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpProxyResponse.ProtoReflect.Descriptor instead.
func (*HttpProxyResponse) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{16}
}

func (x *HttpProxyResponse) GetHeader() *pb.CommonResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *HttpProxyResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *HttpProxyResponse) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpProxyResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *HttpProxyResponse) GetCost() int32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type CheckConfigTaskDistributionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header   *pb.CommonRequestHeader                       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	SubTasks []*CheckConfigTaskDistributionRequest_SubTask `protobuf:"bytes,2,rep,name=sub_tasks,json=subTasks,proto3" json:"sub_tasks,omitempty"`
}

func (x *CheckConfigTaskDistributionRequest) Reset() {
	*x = CheckConfigTaskDistributionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckConfigTaskDistributionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConfigTaskDistributionRequest) ProtoMessage() {}

func (x *CheckConfigTaskDistributionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConfigTaskDistributionRequest.ProtoReflect.Descriptor instead.
func (*CheckConfigTaskDistributionRequest) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{17}
}

func (x *CheckConfigTaskDistributionRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CheckConfigTaskDistributionRequest) GetSubTasks() []*CheckConfigTaskDistributionRequest_SubTask {
	if x != nil {
		return x.SubTasks
	}
	return nil
}

type CheckConfigTaskDistributionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Status []int32                  `protobuf:"varint,2,rep,packed,name=status,proto3" json:"status,omitempty"`
}

func (x *CheckConfigTaskDistributionResponse) Reset() {
	*x = CheckConfigTaskDistributionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckConfigTaskDistributionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConfigTaskDistributionResponse) ProtoMessage() {}

func (x *CheckConfigTaskDistributionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConfigTaskDistributionResponse.ProtoReflect.Descriptor instead.
func (*CheckConfigTaskDistributionResponse) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{18}
}

func (x *CheckConfigTaskDistributionResponse) GetHeader() *pb.CommonResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CheckConfigTaskDistributionResponse) GetStatus() []int32 {
	if x != nil {
		return x.Status
	}
	return nil
}

type DryRunRequest_CollectConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// tableName: 从 db 里读取配置, 根据 tableName 匹配
	// temp:
	Type      string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// 字段对应 gaea_collect_config 里的 记录
	Temp *DryRunRequest_CollectConfigTemp `protobuf:"bytes,3,opt,name=temp,proto3" json:"temp,omitempty"`
}

func (x *DryRunRequest_CollectConfig) Reset() {
	*x = DryRunRequest_CollectConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DryRunRequest_CollectConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DryRunRequest_CollectConfig) ProtoMessage() {}

func (x *DryRunRequest_CollectConfig) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DryRunRequest_CollectConfig.ProtoReflect.Descriptor instead.
func (*DryRunRequest_CollectConfig) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{13, 0}
}

func (x *DryRunRequest_CollectConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DryRunRequest_CollectConfig) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *DryRunRequest_CollectConfig) GetTemp() *DryRunRequest_CollectConfigTemp {
	if x != nil {
		return x.Temp
	}
	return nil
}

type DryRunRequest_Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// plain: 从请求里读
	// read: 从pod里读
	Type  string                    `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Plain *DryRunRequest_InputPlain `protobuf:"bytes,2,opt,name=plain,proto3" json:"plain,omitempty"`
}

func (x *DryRunRequest_Input) Reset() {
	*x = DryRunRequest_Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DryRunRequest_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DryRunRequest_Input) ProtoMessage() {}

func (x *DryRunRequest_Input) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DryRunRequest_Input.ProtoReflect.Descriptor instead.
func (*DryRunRequest_Input) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{13, 1}
}

func (x *DryRunRequest_Input) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DryRunRequest_Input) GetPlain() *DryRunRequest_InputPlain {
	if x != nil {
		return x.Plain
	}
	return nil
}

type DryRunRequest_InputPlain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 原始日志
	Lines []string `protobuf:"bytes,1,rep,name=lines,proto3" json:"lines,omitempty"`
	// Timezone to use when parsing timestamp of log lines.
	// Defaults to local timezone of agent.
	Timezone string `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
}

func (x *DryRunRequest_InputPlain) Reset() {
	*x = DryRunRequest_InputPlain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DryRunRequest_InputPlain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DryRunRequest_InputPlain) ProtoMessage() {}

func (x *DryRunRequest_InputPlain) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DryRunRequest_InputPlain.ProtoReflect.Descriptor instead.
func (*DryRunRequest_InputPlain) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{13, 2}
}

func (x *DryRunRequest_InputPlain) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *DryRunRequest_InputPlain) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

// message InputRead {}
type DryRunRequest_CollectConfigTemp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 字段对应 gaea_collect_config 里的 字段
	Type             string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Json             string `protobuf:"bytes,2,opt,name=json,proto3" json:"json,omitempty"`
	ExecutorSelector string `protobuf:"bytes,3,opt,name=executor_selector,json=executorSelector,proto3" json:"executor_selector,omitempty"`
	CollectRange     string `protobuf:"bytes,4,opt,name=collect_range,json=collectRange,proto3" json:"collect_range,omitempty"`
}

func (x *DryRunRequest_CollectConfigTemp) Reset() {
	*x = DryRunRequest_CollectConfigTemp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DryRunRequest_CollectConfigTemp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DryRunRequest_CollectConfigTemp) ProtoMessage() {}

func (x *DryRunRequest_CollectConfigTemp) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DryRunRequest_CollectConfigTemp.ProtoReflect.Descriptor instead.
func (*DryRunRequest_CollectConfigTemp) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{13, 3}
}

func (x *DryRunRequest_CollectConfigTemp) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DryRunRequest_CollectConfigTemp) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

func (x *DryRunRequest_CollectConfigTemp) GetExecutorSelector() string {
	if x != nil {
		return x.ExecutorSelector
	}
	return ""
}

func (x *DryRunRequest_CollectConfigTemp) GetCollectRange() string {
	if x != nil {
		return x.CollectRange
	}
	return ""
}

type DryRunResponse_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title    string                    `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Params   map[string]string         `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Message  []*DryRunResponse_Message `protobuf:"bytes,3,rep,name=message,proto3" json:"message,omitempty"`
	Children []*DryRunResponse_Event   `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *DryRunResponse_Event) Reset() {
	*x = DryRunResponse_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DryRunResponse_Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DryRunResponse_Event) ProtoMessage() {}

func (x *DryRunResponse_Event) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DryRunResponse_Event.ProtoReflect.Descriptor instead.
func (*DryRunResponse_Event) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{14, 0}
}

func (x *DryRunResponse_Event) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DryRunResponse_Event) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *DryRunResponse_Event) GetMessage() []*DryRunResponse_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *DryRunResponse_Event) GetChildren() []*DryRunResponse_Event {
	if x != nil {
		return x.Children
	}
	return nil
}

type DryRunResponse_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level   string `protobuf:"bytes,1,opt,name=level,proto3" json:"level,omitempty"`
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *DryRunResponse_Message) Reset() {
	*x = DryRunResponse_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DryRunResponse_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DryRunResponse_Message) ProtoMessage() {}

func (x *DryRunResponse_Message) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DryRunResponse_Message.ProtoReflect.Descriptor instead.
func (*DryRunResponse_Message) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{14, 1}
}

func (x *DryRunResponse_Message) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *DryRunResponse_Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type DryRunResponse_GroupResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupLines     []string           `protobuf:"bytes,1,rep,name=group_lines,json=groupLines,proto3" json:"group_lines,omitempty"`
	Success        bool               `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	SelectedValues map[string]float64 `protobuf:"bytes,3,rep,name=selected_values,json=selectedValues,proto3" json:"selected_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	GroupBy        map[string]string  `protobuf:"bytes,4,rep,name=group_by,json=groupBy,proto3" json:"group_by,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DryRunResponse_GroupResult) Reset() {
	*x = DryRunResponse_GroupResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DryRunResponse_GroupResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DryRunResponse_GroupResult) ProtoMessage() {}

func (x *DryRunResponse_GroupResult) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DryRunResponse_GroupResult.ProtoReflect.Descriptor instead.
func (*DryRunResponse_GroupResult) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{14, 2}
}

func (x *DryRunResponse_GroupResult) GetGroupLines() []string {
	if x != nil {
		return x.GroupLines
	}
	return nil
}

func (x *DryRunResponse_GroupResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DryRunResponse_GroupResult) GetSelectedValues() map[string]float64 {
	if x != nil {
		return x.SelectedValues
	}
	return nil
}

func (x *DryRunResponse_GroupResult) GetGroupBy() map[string]string {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

type CheckConfigTaskDistributionRequest_SubTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigKey     string `protobuf:"bytes,1,opt,name=config_key,json=configKey,proto3" json:"config_key,omitempty"`
	ConfigVersion string `protobuf:"bytes,2,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
	TargetKey     string `protobuf:"bytes,3,opt,name=target_key,json=targetKey,proto3" json:"target_key,omitempty"`
	TargetVersion string `protobuf:"bytes,4,opt,name=target_version,json=targetVersion,proto3" json:"target_version,omitempty"`
}

func (x *CheckConfigTaskDistributionRequest_SubTask) Reset() {
	*x = CheckConfigTaskDistributionRequest_SubTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_registry_for_prod_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckConfigTaskDistributionRequest_SubTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConfigTaskDistributionRequest_SubTask) ProtoMessage() {}

func (x *CheckConfigTaskDistributionRequest_SubTask) ProtoReflect() protoreflect.Message {
	mi := &file_registry_for_prod_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConfigTaskDistributionRequest_SubTask.ProtoReflect.Descriptor instead.
func (*CheckConfigTaskDistributionRequest_SubTask) Descriptor() ([]byte, []int) {
	return file_registry_for_prod_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CheckConfigTaskDistributionRequest_SubTask) GetConfigKey() string {
	if x != nil {
		return x.ConfigKey
	}
	return ""
}

func (x *CheckConfigTaskDistributionRequest_SubTask) GetConfigVersion() string {
	if x != nil {
		return x.ConfigVersion
	}
	return ""
}

func (x *CheckConfigTaskDistributionRequest_SubTask) GetTargetKey() string {
	if x != nil {
		return x.TargetKey
	}
	return ""
}

func (x *CheckConfigTaskDistributionRequest_SubTask) GetTargetVersion() string {
	if x != nil {
		return x.TargetVersion
	}
	return ""
}

var File_registry_for_prod_proto protoreflect.FileDescriptor

var file_registry_for_prod_proto_rawDesc = []byte{
	0x0a, 0x17, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x2d, 0x70,
	0x72, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x69, 0x6f, 0x2e, 0x68, 0x6f,
	0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x47, 0x0a, 0x10, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x6b, 0x22, 0xa6, 0x01, 0x0a, 0x21, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69,
	0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x75, 0x0a, 0x22, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xfa, 0x01, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x45, 0x78, 0x74, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0xe5, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f,
	0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x50, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67,
	0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x0f, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x22, 0xfe, 0x01, 0x0a, 0x10, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x5e, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x39, 0x0a,
	0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7b, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f,
	0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xfe, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c,
	0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x69, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x56, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x12, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x74, 0x65, 0x64, 0x22, 0xd2, 0x06, 0x0a, 0x0d, 0x44,
	0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x2e, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x52, 0x0a, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x53, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x2e, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x1a, 0xa1, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x04, 0x74, 0x65, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c,
	0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x2e, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x65, 0x6d, 0x70, 0x1a, 0x75, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x58, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x2e,
	0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x1a,
	0x3e, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x1a,
	0x8d, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x6f, 0x72, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x90, 0x09, 0x0a, 0x0e, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69,
	0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x2e, 0x44, 0x72,
	0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x0d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x2e, 0x44, 0x72, 0x79, 0x52,
	0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x1a, 0xf4, 0x02, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x62, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x2e,
	0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x2e, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x2e, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xb9, 0x03, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x81, 0x01, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x58, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x2e, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x6c, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62,
	0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x51, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c,
	0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x2e, 0x44, 0x72, 0x79, 0x52, 0x75, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x1a, 0x41, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xda, 0x02, 0x0a, 0x10, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c,
	0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x61, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xc0, 0x02, 0x0a, 0x11, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x62, 0x0a, 0x07, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xff, 0x02, 0x0a, 0x22, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x09, 0x73, 0x75, 0x62,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x1a, 0x95, 0x01, 0x0a,
	0x07, 0x53, 0x75, 0x62, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x23, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x80, 0x01, 0x0a, 0x28, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c,
	0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x42, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x61, 0x73, 0x2d, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x2f, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_registry_for_prod_proto_rawDescOnce sync.Once
	file_registry_for_prod_proto_rawDescData = file_registry_for_prod_proto_rawDesc
)

func file_registry_for_prod_proto_rawDescGZIP() []byte {
	file_registry_for_prod_proto_rawDescOnce.Do(func() {
		file_registry_for_prod_proto_rawDescData = protoimpl.X.CompressGZIP(file_registry_for_prod_proto_rawDescData)
	})
	return file_registry_for_prod_proto_rawDescData
}

var file_registry_for_prod_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_registry_for_prod_proto_goTypes = []interface{}{
	(*TargetIdentifier)(nil),                    // 0: io.holoinsight.server.registry.grpc.prod.TargetIdentifier
	(*NotifyCollectConfigUpdatedRequest)(nil),   // 1: io.holoinsight.server.registry.grpc.prod.NotifyCollectConfigUpdatedRequest
	(*NotifyCollectConfigUpdatedResponse)(nil),  // 2: io.holoinsight.server.registry.grpc.prod.NotifyCollectConfigUpdatedResponse
	(*ListFilesRequest)(nil),                    // 3: io.holoinsight.server.registry.grpc.prod.ListFilesRequest
	(*ListFilesResponse)(nil),                   // 4: io.holoinsight.server.registry.grpc.prod.ListFilesResponse
	(*PreviewFileRequest)(nil),                  // 5: io.holoinsight.server.registry.grpc.prod.PreviewFileRequest
	(*PreviewFileResponse)(nil),                 // 6: io.holoinsight.server.registry.grpc.prod.PreviewFileResponse
	(*SplitLogRequest)(nil),                     // 7: io.holoinsight.server.registry.grpc.prod.SplitLogRequest
	(*SplitLogResponse)(nil),                    // 8: io.holoinsight.server.registry.grpc.prod.SplitLogResponse
	(*InspectRequest)(nil),                      // 9: io.holoinsight.server.registry.grpc.prod.InspectRequest
	(*InspectResponse)(nil),                     // 10: io.holoinsight.server.registry.grpc.prod.InspectResponse
	(*MatchFilesRequest)(nil),                   // 11: io.holoinsight.server.registry.grpc.prod.MatchFilesRequest
	(*MatchFilesResponse)(nil),                  // 12: io.holoinsight.server.registry.grpc.prod.MatchFilesResponse
	(*DryRunRequest)(nil),                       // 13: io.holoinsight.server.registry.grpc.prod.DryRunRequest
	(*DryRunResponse)(nil),                      // 14: io.holoinsight.server.registry.grpc.prod.DryRunResponse
	(*HttpProxyRequest)(nil),                    // 15: io.holoinsight.server.registry.grpc.prod.HttpProxyRequest
	(*HttpProxyResponse)(nil),                   // 16: io.holoinsight.server.registry.grpc.prod.HttpProxyResponse
	(*CheckConfigTaskDistributionRequest)(nil),  // 17: io.holoinsight.server.registry.grpc.prod.CheckConfigTaskDistributionRequest
	(*CheckConfigTaskDistributionResponse)(nil), // 18: io.holoinsight.server.registry.grpc.prod.CheckConfigTaskDistributionResponse
	nil,                                     // 19: io.holoinsight.server.registry.grpc.prod.SplitLogResponse.ResultEntry
	(*DryRunRequest_CollectConfig)(nil),     // 20: io.holoinsight.server.registry.grpc.prod.DryRunRequest.CollectConfig
	(*DryRunRequest_Input)(nil),             // 21: io.holoinsight.server.registry.grpc.prod.DryRunRequest.Input
	(*DryRunRequest_InputPlain)(nil),        // 22: io.holoinsight.server.registry.grpc.prod.DryRunRequest.InputPlain
	(*DryRunRequest_CollectConfigTemp)(nil), // 23: io.holoinsight.server.registry.grpc.prod.DryRunRequest.CollectConfigTemp
	(*DryRunResponse_Event)(nil),            // 24: io.holoinsight.server.registry.grpc.prod.DryRunResponse.Event
	(*DryRunResponse_Message)(nil),          // 25: io.holoinsight.server.registry.grpc.prod.DryRunResponse.Message
	(*DryRunResponse_GroupResult)(nil),      // 26: io.holoinsight.server.registry.grpc.prod.DryRunResponse.GroupResult
	nil,                                     // 27: io.holoinsight.server.registry.grpc.prod.DryRunResponse.Event.ParamsEntry
	nil,                                     // 28: io.holoinsight.server.registry.grpc.prod.DryRunResponse.GroupResult.SelectedValuesEntry
	nil,                                     // 29: io.holoinsight.server.registry.grpc.prod.DryRunResponse.GroupResult.GroupByEntry
	nil,                                     // 30: io.holoinsight.server.registry.grpc.prod.HttpProxyRequest.HeadersEntry
	nil,                                     // 31: io.holoinsight.server.registry.grpc.prod.HttpProxyResponse.HeadersEntry
	(*CheckConfigTaskDistributionRequest_SubTask)(nil), // 32: io.holoinsight.server.registry.grpc.prod.CheckConfigTaskDistributionRequest.SubTask
	(*pb.CommonRequestHeader)(nil),                     // 33: io.holoinsight.server.common.grpc.CommonRequestHeader
	(*pb.CommonResponseHeader)(nil),                    // 34: io.holoinsight.server.common.grpc.CommonResponseHeader
	(*pb.FileNode)(nil),                                // 35: io.holoinsight.server.common.grpc.FileNode
}
var file_registry_for_prod_proto_depIdxs = []int32{
	33, // 0: io.holoinsight.server.registry.grpc.prod.NotifyCollectConfigUpdatedRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	34, // 1: io.holoinsight.server.registry.grpc.prod.NotifyCollectConfigUpdatedResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonResponseHeader
	33, // 2: io.holoinsight.server.registry.grpc.prod.ListFilesRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	34, // 3: io.holoinsight.server.registry.grpc.prod.ListFilesResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonResponseHeader
	35, // 4: io.holoinsight.server.registry.grpc.prod.ListFilesResponse.nodes:type_name -> io.holoinsight.server.common.grpc.FileNode
	33, // 5: io.holoinsight.server.registry.grpc.prod.PreviewFileRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	34, // 6: io.holoinsight.server.registry.grpc.prod.PreviewFileResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonResponseHeader
	33, // 7: io.holoinsight.server.registry.grpc.prod.SplitLogRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	34, // 8: io.holoinsight.server.registry.grpc.prod.SplitLogResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonResponseHeader
	19, // 9: io.holoinsight.server.registry.grpc.prod.SplitLogResponse.result:type_name -> io.holoinsight.server.registry.grpc.prod.SplitLogResponse.ResultEntry
	33, // 10: io.holoinsight.server.registry.grpc.prod.InspectRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	34, // 11: io.holoinsight.server.registry.grpc.prod.InspectResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonResponseHeader
	33, // 12: io.holoinsight.server.registry.grpc.prod.MatchFilesRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	34, // 13: io.holoinsight.server.registry.grpc.prod.MatchFilesResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonResponseHeader
	33, // 14: io.holoinsight.server.registry.grpc.prod.DryRunRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	20, // 15: io.holoinsight.server.registry.grpc.prod.DryRunRequest.config:type_name -> io.holoinsight.server.registry.grpc.prod.DryRunRequest.CollectConfig
	0,  // 16: io.holoinsight.server.registry.grpc.prod.DryRunRequest.target:type_name -> io.holoinsight.server.registry.grpc.prod.TargetIdentifier
	21, // 17: io.holoinsight.server.registry.grpc.prod.DryRunRequest.input:type_name -> io.holoinsight.server.registry.grpc.prod.DryRunRequest.Input
	34, // 18: io.holoinsight.server.registry.grpc.prod.DryRunResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonResponseHeader
	24, // 19: io.holoinsight.server.registry.grpc.prod.DryRunResponse.event:type_name -> io.holoinsight.server.registry.grpc.prod.DryRunResponse.Event
	26, // 20: io.holoinsight.server.registry.grpc.prod.DryRunResponse.group_results:type_name -> io.holoinsight.server.registry.grpc.prod.DryRunResponse.GroupResult
	33, // 21: io.holoinsight.server.registry.grpc.prod.HttpProxyRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	30, // 22: io.holoinsight.server.registry.grpc.prod.HttpProxyRequest.headers:type_name -> io.holoinsight.server.registry.grpc.prod.HttpProxyRequest.HeadersEntry
	34, // 23: io.holoinsight.server.registry.grpc.prod.HttpProxyResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonResponseHeader
	31, // 24: io.holoinsight.server.registry.grpc.prod.HttpProxyResponse.headers:type_name -> io.holoinsight.server.registry.grpc.prod.HttpProxyResponse.HeadersEntry
	33, // 25: io.holoinsight.server.registry.grpc.prod.CheckConfigTaskDistributionRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	32, // 26: io.holoinsight.server.registry.grpc.prod.CheckConfigTaskDistributionRequest.sub_tasks:type_name -> io.holoinsight.server.registry.grpc.prod.CheckConfigTaskDistributionRequest.SubTask
	34, // 27: io.holoinsight.server.registry.grpc.prod.CheckConfigTaskDistributionResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonResponseHeader
	23, // 28: io.holoinsight.server.registry.grpc.prod.DryRunRequest.CollectConfig.temp:type_name -> io.holoinsight.server.registry.grpc.prod.DryRunRequest.CollectConfigTemp
	22, // 29: io.holoinsight.server.registry.grpc.prod.DryRunRequest.Input.plain:type_name -> io.holoinsight.server.registry.grpc.prod.DryRunRequest.InputPlain
	27, // 30: io.holoinsight.server.registry.grpc.prod.DryRunResponse.Event.params:type_name -> io.holoinsight.server.registry.grpc.prod.DryRunResponse.Event.ParamsEntry
	25, // 31: io.holoinsight.server.registry.grpc.prod.DryRunResponse.Event.message:type_name -> io.holoinsight.server.registry.grpc.prod.DryRunResponse.Message
	24, // 32: io.holoinsight.server.registry.grpc.prod.DryRunResponse.Event.children:type_name -> io.holoinsight.server.registry.grpc.prod.DryRunResponse.Event
	28, // 33: io.holoinsight.server.registry.grpc.prod.DryRunResponse.GroupResult.selected_values:type_name -> io.holoinsight.server.registry.grpc.prod.DryRunResponse.GroupResult.SelectedValuesEntry
	29, // 34: io.holoinsight.server.registry.grpc.prod.DryRunResponse.GroupResult.group_by:type_name -> io.holoinsight.server.registry.grpc.prod.DryRunResponse.GroupResult.GroupByEntry
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_registry_for_prod_proto_init() }
func file_registry_for_prod_proto_init() {
	if File_registry_for_prod_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_registry_for_prod_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyCollectConfigUpdatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotifyCollectConfigUpdatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PreviewFileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchFilesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchFilesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DryRunRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DryRunResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpProxyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpProxyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckConfigTaskDistributionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckConfigTaskDistributionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DryRunRequest_CollectConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DryRunRequest_Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DryRunRequest_InputPlain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DryRunRequest_CollectConfigTemp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DryRunResponse_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DryRunResponse_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DryRunResponse_GroupResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_registry_for_prod_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckConfigTaskDistributionRequest_SubTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_registry_for_prod_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_registry_for_prod_proto_goTypes,
		DependencyIndexes: file_registry_for_prod_proto_depIdxs,
		MessageInfos:      file_registry_for_prod_proto_msgTypes,
	}.Build()
	File_registry_for_prod_proto = out.File
	file_registry_for_prod_proto_rawDesc = nil
	file_registry_for_prod_proto_goTypes = nil
	file_registry_for_prod_proto_depIdxs = nil
}
