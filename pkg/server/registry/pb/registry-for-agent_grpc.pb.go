/*
 * Copyright 2022 Holoinsight Project Authors. Licensed under Apache-2.0.
 */

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: registry-for-agent.proto

package pb

import (
	context "context"
	pb "github.com/traas-stack/holoinsight-agent/pkg/server/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegistryServiceForAgentClient is the client API for RegistryServiceForAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryServiceForAgentClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 向服务端注册一个agent, 每N时间执行一次, 携带的信息比较多
	RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error)
	// 发送Agent心跳
	SendAgentHeartbeat(ctx context.Context, in *SendAgentHeartbeatRequest, opts ...grpc.CallOption) (*SendAgentHeartbeatResponse, error)
	// 发送Agent运行状态统计信息
	SendRunStats(ctx context.Context, in *RunStatsRequest, opts ...grpc.CallOption) (*RunStatsResponse, error)
	// 发送Agent运行状态事件信息
	SendRunEvents(ctx context.Context, in *RunEventsRequest, opts ...grpc.CallOption) (*RunEventsResponse, error)
	// 查询registry对该agent的控制参数
	GetControlConfigs(ctx context.Context, in *GetControlConfigsRequest, opts ...grpc.CallOption) (*GetControlConfigsResponse, error)
	// 查询采集配置
	GetCollectTasks(ctx context.Context, in *GetCollectTasksRequest, opts ...grpc.CallOption) (*GetCollectTasksResponse, error)
	// 双向流 用于实现反向调用, 实现 reverse rpc on grpc
	BiStreams(ctx context.Context, opts ...grpc.CallOption) (RegistryServiceForAgent_BiStreamsClient, error)
	MetaFullSync(ctx context.Context, in *MetaSync_FullSyncRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MetaDeltaSync(ctx context.Context, in *MetaSync_DeltaSyncRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReportEvents(ctx context.Context, in *ReportEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type registryServiceForAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryServiceForAgentClient(cc grpc.ClientConnInterface) RegistryServiceForAgentClient {
	return &registryServiceForAgentClient{cc}
}

func (c *registryServiceForAgentClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceForAgentClient) RegisterAgent(ctx context.Context, in *RegisterAgentRequest, opts ...grpc.CallOption) (*RegisterAgentResponse, error) {
	out := new(RegisterAgentResponse)
	err := c.cc.Invoke(ctx, "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/register_agent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceForAgentClient) SendAgentHeartbeat(ctx context.Context, in *SendAgentHeartbeatRequest, opts ...grpc.CallOption) (*SendAgentHeartbeatResponse, error) {
	out := new(SendAgentHeartbeatResponse)
	err := c.cc.Invoke(ctx, "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/send_agent_heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceForAgentClient) SendRunStats(ctx context.Context, in *RunStatsRequest, opts ...grpc.CallOption) (*RunStatsResponse, error) {
	out := new(RunStatsResponse)
	err := c.cc.Invoke(ctx, "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/send_run_stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceForAgentClient) SendRunEvents(ctx context.Context, in *RunEventsRequest, opts ...grpc.CallOption) (*RunEventsResponse, error) {
	out := new(RunEventsResponse)
	err := c.cc.Invoke(ctx, "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/send_run_events", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceForAgentClient) GetControlConfigs(ctx context.Context, in *GetControlConfigsRequest, opts ...grpc.CallOption) (*GetControlConfigsResponse, error) {
	out := new(GetControlConfigsResponse)
	err := c.cc.Invoke(ctx, "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/get_control_configs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceForAgentClient) GetCollectTasks(ctx context.Context, in *GetCollectTasksRequest, opts ...grpc.CallOption) (*GetCollectTasksResponse, error) {
	out := new(GetCollectTasksResponse)
	err := c.cc.Invoke(ctx, "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/get_collect_tasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceForAgentClient) BiStreams(ctx context.Context, opts ...grpc.CallOption) (RegistryServiceForAgent_BiStreamsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RegistryServiceForAgent_ServiceDesc.Streams[0], "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/bi_streams", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryServiceForAgentBiStreamsClient{stream}
	return x, nil
}

type RegistryServiceForAgent_BiStreamsClient interface {
	Send(*pb.GenericRpcCommand) error
	Recv() (*pb.GenericRpcCommand, error)
	grpc.ClientStream
}

type registryServiceForAgentBiStreamsClient struct {
	grpc.ClientStream
}

func (x *registryServiceForAgentBiStreamsClient) Send(m *pb.GenericRpcCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registryServiceForAgentBiStreamsClient) Recv() (*pb.GenericRpcCommand, error) {
	m := new(pb.GenericRpcCommand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registryServiceForAgentClient) MetaFullSync(ctx context.Context, in *MetaSync_FullSyncRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/meta_full_sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceForAgentClient) MetaDeltaSync(ctx context.Context, in *MetaSync_DeltaSyncRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/meta_delta_sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceForAgentClient) ReportEvents(ctx context.Context, in *ReportEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/report_events", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServiceForAgentServer is the server API for RegistryServiceForAgent service.
// All implementations must embed UnimplementedRegistryServiceForAgentServer
// for forward compatibility
type RegistryServiceForAgentServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 向服务端注册一个agent, 每N时间执行一次, 携带的信息比较多
	RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error)
	// 发送Agent心跳
	SendAgentHeartbeat(context.Context, *SendAgentHeartbeatRequest) (*SendAgentHeartbeatResponse, error)
	// 发送Agent运行状态统计信息
	SendRunStats(context.Context, *RunStatsRequest) (*RunStatsResponse, error)
	// 发送Agent运行状态事件信息
	SendRunEvents(context.Context, *RunEventsRequest) (*RunEventsResponse, error)
	// 查询registry对该agent的控制参数
	GetControlConfigs(context.Context, *GetControlConfigsRequest) (*GetControlConfigsResponse, error)
	// 查询采集配置
	GetCollectTasks(context.Context, *GetCollectTasksRequest) (*GetCollectTasksResponse, error)
	// 双向流 用于实现反向调用, 实现 reverse rpc on grpc
	BiStreams(RegistryServiceForAgent_BiStreamsServer) error
	MetaFullSync(context.Context, *MetaSync_FullSyncRequest) (*emptypb.Empty, error)
	MetaDeltaSync(context.Context, *MetaSync_DeltaSyncRequest) (*emptypb.Empty, error)
	ReportEvents(context.Context, *ReportEventRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRegistryServiceForAgentServer()
}

// UnimplementedRegistryServiceForAgentServer must be embedded to have forward compatible implementations.
type UnimplementedRegistryServiceForAgentServer struct {
}

func (UnimplementedRegistryServiceForAgentServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedRegistryServiceForAgentServer) RegisterAgent(context.Context, *RegisterAgentRequest) (*RegisterAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAgent not implemented")
}
func (UnimplementedRegistryServiceForAgentServer) SendAgentHeartbeat(context.Context, *SendAgentHeartbeatRequest) (*SendAgentHeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAgentHeartbeat not implemented")
}
func (UnimplementedRegistryServiceForAgentServer) SendRunStats(context.Context, *RunStatsRequest) (*RunStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRunStats not implemented")
}
func (UnimplementedRegistryServiceForAgentServer) SendRunEvents(context.Context, *RunEventsRequest) (*RunEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRunEvents not implemented")
}
func (UnimplementedRegistryServiceForAgentServer) GetControlConfigs(context.Context, *GetControlConfigsRequest) (*GetControlConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControlConfigs not implemented")
}
func (UnimplementedRegistryServiceForAgentServer) GetCollectTasks(context.Context, *GetCollectTasksRequest) (*GetCollectTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectTasks not implemented")
}
func (UnimplementedRegistryServiceForAgentServer) BiStreams(RegistryServiceForAgent_BiStreamsServer) error {
	return status.Errorf(codes.Unimplemented, "method BiStreams not implemented")
}
func (UnimplementedRegistryServiceForAgentServer) MetaFullSync(context.Context, *MetaSync_FullSyncRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetaFullSync not implemented")
}
func (UnimplementedRegistryServiceForAgentServer) MetaDeltaSync(context.Context, *MetaSync_DeltaSyncRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetaDeltaSync not implemented")
}
func (UnimplementedRegistryServiceForAgentServer) ReportEvents(context.Context, *ReportEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportEvents not implemented")
}
func (UnimplementedRegistryServiceForAgentServer) mustEmbedUnimplementedRegistryServiceForAgentServer() {
}

// UnsafeRegistryServiceForAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServiceForAgentServer will
// result in compilation errors.
type UnsafeRegistryServiceForAgentServer interface {
	mustEmbedUnimplementedRegistryServiceForAgentServer()
}

func RegisterRegistryServiceForAgentServer(s grpc.ServiceRegistrar, srv RegistryServiceForAgentServer) {
	s.RegisterService(&RegistryServiceForAgent_ServiceDesc, srv)
}

func _RegistryServiceForAgent_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceForAgentServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceForAgentServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryServiceForAgent_RegisterAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceForAgentServer).RegisterAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/register_agent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceForAgentServer).RegisterAgent(ctx, req.(*RegisterAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryServiceForAgent_SendAgentHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAgentHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceForAgentServer).SendAgentHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/send_agent_heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceForAgentServer).SendAgentHeartbeat(ctx, req.(*SendAgentHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryServiceForAgent_SendRunStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceForAgentServer).SendRunStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/send_run_stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceForAgentServer).SendRunStats(ctx, req.(*RunStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryServiceForAgent_SendRunEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceForAgentServer).SendRunEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/send_run_events",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceForAgentServer).SendRunEvents(ctx, req.(*RunEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryServiceForAgent_GetControlConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControlConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceForAgentServer).GetControlConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/get_control_configs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceForAgentServer).GetControlConfigs(ctx, req.(*GetControlConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryServiceForAgent_GetCollectTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceForAgentServer).GetCollectTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/get_collect_tasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceForAgentServer).GetCollectTasks(ctx, req.(*GetCollectTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryServiceForAgent_BiStreams_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegistryServiceForAgentServer).BiStreams(&registryServiceForAgentBiStreamsServer{stream})
}

type RegistryServiceForAgent_BiStreamsServer interface {
	Send(*pb.GenericRpcCommand) error
	Recv() (*pb.GenericRpcCommand, error)
	grpc.ServerStream
}

type registryServiceForAgentBiStreamsServer struct {
	grpc.ServerStream
}

func (x *registryServiceForAgentBiStreamsServer) Send(m *pb.GenericRpcCommand) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registryServiceForAgentBiStreamsServer) Recv() (*pb.GenericRpcCommand, error) {
	m := new(pb.GenericRpcCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RegistryServiceForAgent_MetaFullSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaSync_FullSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceForAgentServer).MetaFullSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/meta_full_sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceForAgentServer).MetaFullSync(ctx, req.(*MetaSync_FullSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryServiceForAgent_MetaDeltaSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaSync_DeltaSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceForAgentServer).MetaDeltaSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/meta_delta_sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceForAgentServer).MetaDeltaSync(ctx, req.(*MetaSync_DeltaSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryServiceForAgent_ReportEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceForAgentServer).ReportEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent/report_events",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceForAgentServer).ReportEvents(ctx, req.(*ReportEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistryServiceForAgent_ServiceDesc is the grpc.ServiceDesc for RegistryServiceForAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistryServiceForAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.holoinsight.server.registry.grpc.agent.RegistryServiceForAgent",
	HandlerType: (*RegistryServiceForAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ping",
			Handler:    _RegistryServiceForAgent_Ping_Handler,
		},
		{
			MethodName: "register_agent",
			Handler:    _RegistryServiceForAgent_RegisterAgent_Handler,
		},
		{
			MethodName: "send_agent_heartbeat",
			Handler:    _RegistryServiceForAgent_SendAgentHeartbeat_Handler,
		},
		{
			MethodName: "send_run_stats",
			Handler:    _RegistryServiceForAgent_SendRunStats_Handler,
		},
		{
			MethodName: "send_run_events",
			Handler:    _RegistryServiceForAgent_SendRunEvents_Handler,
		},
		{
			MethodName: "get_control_configs",
			Handler:    _RegistryServiceForAgent_GetControlConfigs_Handler,
		},
		{
			MethodName: "get_collect_tasks",
			Handler:    _RegistryServiceForAgent_GetCollectTasks_Handler,
		},
		{
			MethodName: "meta_full_sync",
			Handler:    _RegistryServiceForAgent_MetaFullSync_Handler,
		},
		{
			MethodName: "meta_delta_sync",
			Handler:    _RegistryServiceForAgent_MetaDeltaSync_Handler,
		},
		{
			MethodName: "report_events",
			Handler:    _RegistryServiceForAgent_ReportEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "bi_streams",
			Handler:       _RegistryServiceForAgent_BiStreams_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "registry-for-agent.proto",
}
