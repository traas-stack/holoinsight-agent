/*
 * Copyright 2022 Holoinsight Project Authors. Licensed under Apache-2.0.
 */

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.14.0
// source: gateway-for-agent.proto

package pb

import (
	"github.com/traas-stack/holoinsight-agent/pkg/server/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetControlConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	AgentId string                  `protobuf:"bytes,2,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
}

func (x *GetControlConfigsRequest) Reset() {
	*x = GetControlConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_for_agent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetControlConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetControlConfigsRequest) ProtoMessage() {}

func (x *GetControlConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_for_agent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetControlConfigsRequest.ProtoReflect.Descriptor instead.
func (*GetControlConfigsRequest) Descriptor() ([]byte, []int) {
	return file_gateway_for_agent_proto_rawDescGZIP(), []int{0}
}

func (x *GetControlConfigsRequest) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetControlConfigsRequest) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

type GetControlConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetControlConfigsResponse) Reset() {
	*x = GetControlConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_for_agent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetControlConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetControlConfigsResponse) ProtoMessage() {}

func (x *GetControlConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_for_agent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetControlConfigsResponse.ProtoReflect.Descriptor instead.
func (*GetControlConfigsResponse) Descriptor() ([]byte, []int) {
	return file_gateway_for_agent_proto_rawDescGZIP(), []int{1}
}

func (x *GetControlConfigsResponse) GetHeader() *pb.CommonResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// 对应ceresdb的一个数据点
type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricName string `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	// 秒级时间戳
	Timestamp int64             `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Tags      map[string]string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ceresdb 支持2种values: float/string
	// 别用Any/OneOf, 那样效率太低, 直接分成两个, 并且规定一旦同名的话 number 优先级 > string
	NumberValues map[string]float64 `protobuf:"bytes,4,rep,name=number_values,json=numberValues,proto3" json:"number_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	StringValues map[string]string  `protobuf:"bytes,5,rep,name=string_values,json=stringValues,proto3" json:"string_values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_for_agent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_for_agent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_gateway_for_agent_proto_rawDescGZIP(), []int{2}
}

func (x *Point) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *Point) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Point) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Point) GetNumberValues() map[string]float64 {
	if x != nil {
		return x.NumberValues
	}
	return nil
}

func (x *Point) GetStringValues() map[string]string {
	if x != nil {
		return x.StringValues
	}
	return nil
}

// 可以存下各种类型的万能字段
type DataNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 表示数据类型, 其实这里不存也行, 根据配置元数据理论是可以知道的
	// 比如约定:
	// 0 的话 value 就是聚合后的结果, count是聚合次数(可能没用)
	// 1 的话 value 表示聚合类型是avg, count是聚合次数, value是sum值, 此时用 sum/count 可以得到正确的avg, 方便做分布式avg计算
	// 2 的话 表示 bytes 是字符串, 需要根据具体业务语义进行解释
	// 3 的话 表示 bytes 是复杂的字节数据, 需要根据具体业务语义进行解释
	Type int32 `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	// 聚合次数
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// 聚合的值, 根据情况可能是一个聚合结果, 或avg的sum值(此时需要与count配合使用)
	Value float64 `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`
	// 还能携带任意二进制数据, 字符串也可以使用这种方式存
	Bytes []byte `protobuf:"bytes,4,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *DataNode) Reset() {
	*x = DataNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_for_agent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataNode) ProtoMessage() {}

func (x *DataNode) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_for_agent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataNode.ProtoReflect.Descriptor instead.
func (*DataNode) Descriptor() ([]byte, []int) {
	return file_gateway_for_agent_proto_rawDescGZIP(), []int{3}
}

func (x *DataNode) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DataNode) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *DataNode) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *DataNode) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

// TODO 写数据接口 v1
// 优点是简单, 基本和用户的数据是匹配的, 可以很简单转换
// 缺点是彻底失去对内容的控制能力, agent传过来啥就写啥, 会不会有点不太好?
// 另外还有一个是数据的keys大量冗余
type WriteMetricsRequestV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 在请求头里还有apikey, 可以供我们找出租户
	Header *pb.CommonRequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Point  []*Point                `protobuf:"bytes,2,rep,name=point,proto3" json:"point,omitempty"`
}

func (x *WriteMetricsRequestV1) Reset() {
	*x = WriteMetricsRequestV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_for_agent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMetricsRequestV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMetricsRequestV1) ProtoMessage() {}

func (x *WriteMetricsRequestV1) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_for_agent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMetricsRequestV1.ProtoReflect.Descriptor instead.
func (*WriteMetricsRequestV1) Descriptor() ([]byte, []int) {
	return file_gateway_for_agent_proto_rawDescGZIP(), []int{4}
}

func (x *WriteMetricsRequestV1) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *WriteMetricsRequestV1) GetPoint() []*Point {
	if x != nil {
		return x.Point
	}
	return nil
}

// TODO 写数据接口 v2
// 优点是 调整结构使得数据复用程度提高
// 缺点是用户发数据的时候需要按我的格式调整
type WriteMetricsRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonRequestHeader        `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Batch  []*WriteMetricsRequestV2_Batch `protobuf:"bytes,2,rep,name=batch,proto3" json:"batch,omitempty"`
}

func (x *WriteMetricsRequestV2) Reset() {
	*x = WriteMetricsRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_for_agent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMetricsRequestV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMetricsRequestV2) ProtoMessage() {}

func (x *WriteMetricsRequestV2) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_for_agent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMetricsRequestV2.ProtoReflect.Descriptor instead.
func (*WriteMetricsRequestV2) Descriptor() ([]byte, []int) {
	return file_gateway_for_agent_proto_rawDescGZIP(), []int{5}
}

func (x *WriteMetricsRequestV2) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *WriteMetricsRequestV2) GetBatch() []*WriteMetricsRequestV2_Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

// TODO 写数据接口 v3
// 优点 数据复用程度最高, 传输效率应该也是最高
// 缺点 该格式基本是为我们的agent而定制的了
type WriteMetricsRequestV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonRequestHeader            `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Batch  []*WriteMetricsRequestV3_TaskBatch `protobuf:"bytes,2,rep,name=batch,proto3" json:"batch,omitempty"`
}

func (x *WriteMetricsRequestV3) Reset() {
	*x = WriteMetricsRequestV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_for_agent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMetricsRequestV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMetricsRequestV3) ProtoMessage() {}

func (x *WriteMetricsRequestV3) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_for_agent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMetricsRequestV3.ProtoReflect.Descriptor instead.
func (*WriteMetricsRequestV3) Descriptor() ([]byte, []int) {
	return file_gateway_for_agent_proto_rawDescGZIP(), []int{6}
}

func (x *WriteMetricsRequestV3) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *WriteMetricsRequestV3) GetBatch() []*WriteMetricsRequestV3_TaskBatch {
	if x != nil {
		return x.Batch
	}
	return nil
}

// 相比v3进一步提升为table形式
type WriteMetricsRequestV4 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *pb.CommonRequestHeader             `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Results []*WriteMetricsRequestV4_TaskResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *WriteMetricsRequestV4) Reset() {
	*x = WriteMetricsRequestV4{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_for_agent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMetricsRequestV4) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMetricsRequestV4) ProtoMessage() {}

func (x *WriteMetricsRequestV4) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_for_agent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMetricsRequestV4.ProtoReflect.Descriptor instead.
func (*WriteMetricsRequestV4) Descriptor() ([]byte, []int) {
	return file_gateway_for_agent_proto_rawDescGZIP(), []int{7}
}

func (x *WriteMetricsRequestV4) GetHeader() *pb.CommonRequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *WriteMetricsRequestV4) GetResults() []*WriteMetricsRequestV4_TaskResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type WriteMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *pb.CommonResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *WriteMetricsResponse) Reset() {
	*x = WriteMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_for_agent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMetricsResponse) ProtoMessage() {}

func (x *WriteMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_for_agent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMetricsResponse.ProtoReflect.Descriptor instead.
func (*WriteMetricsResponse) Descriptor() ([]byte, []int) {
	return file_gateway_for_agent_proto_rawDescGZIP(), []int{8}
}

func (x *WriteMetricsResponse) GetHeader() *pb.CommonResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type WriteMetricsRequestV2_Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *WriteMetricsRequestV2_BatchHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Value  []*WriteMetricsRequestV2_BatchValue `protobuf:"bytes,2,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *WriteMetricsRequestV2_Batch) Reset() {
	*x = WriteMetricsRequestV2_Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_for_agent_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMetricsRequestV2_Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMetricsRequestV2_Batch) ProtoMessage() {}

func (x *WriteMetricsRequestV2_Batch) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_for_agent_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMetricsRequestV2_Batch.ProtoReflect.Descriptor instead.
func (*WriteMetricsRequestV2_Batch) Descriptor() ([]byte, []int) {
	return file_gateway_for_agent_proto_rawDescGZIP(), []int{5, 0}
}

func (x *WriteMetricsRequestV2_Batch) GetHeader() *WriteMetricsRequestV2_BatchHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *WriteMetricsRequestV2_Batch) GetValue() []*WriteMetricsRequestV2_BatchValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type WriteMetricsRequestV2_BatchHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricName string   `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	TagKeys    []string `protobuf:"bytes,2,rep,name=tag_keys,json=tagKeys,proto3" json:"tag_keys,omitempty"`
	// 由于存在多种values的值, 这里有2种设计方式
	// 1. 针对每种数据类型有自己的数据
	NumberKeys []string `protobuf:"bytes,3,rep,name=number_keys,json=numberKeys,proto3" json:"number_keys,omitempty"`
	StringKeys []string `protobuf:"bytes,4,rep,name=string_keys,json=stringKeys,proto3" json:"string_keys,omitempty"`
	// 2. 使用一种更通用的数据类型来包装我们的多种数据类型
	DataKeys []string `protobuf:"bytes,5,rep,name=data_keys,json=dataKeys,proto3" json:"data_keys,omitempty"`
}

func (x *WriteMetricsRequestV2_BatchHeader) Reset() {
	*x = WriteMetricsRequestV2_BatchHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_for_agent_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMetricsRequestV2_BatchHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMetricsRequestV2_BatchHeader) ProtoMessage() {}

func (x *WriteMetricsRequestV2_BatchHeader) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_for_agent_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMetricsRequestV2_BatchHeader.ProtoReflect.Descriptor instead.
func (*WriteMetricsRequestV2_BatchHeader) Descriptor() ([]byte, []int) {
	return file_gateway_for_agent_proto_rawDescGZIP(), []int{5, 1}
}

func (x *WriteMetricsRequestV2_BatchHeader) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *WriteMetricsRequestV2_BatchHeader) GetTagKeys() []string {
	if x != nil {
		return x.TagKeys
	}
	return nil
}

func (x *WriteMetricsRequestV2_BatchHeader) GetNumberKeys() []string {
	if x != nil {
		return x.NumberKeys
	}
	return nil
}

func (x *WriteMetricsRequestV2_BatchHeader) GetStringKeys() []string {
	if x != nil {
		return x.StringKeys
	}
	return nil
}

func (x *WriteMetricsRequestV2_BatchHeader) GetDataKeys() []string {
	if x != nil {
		return x.DataKeys
	}
	return nil
}

type WriteMetricsRequestV2_BatchValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp    int64       `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TagValues    []string    `protobuf:"bytes,2,rep,name=tag_values,json=tagValues,proto3" json:"tag_values,omitempty"`
	NumberValues []float64   `protobuf:"fixed64,3,rep,packed,name=number_values,json=numberValues,proto3" json:"number_values,omitempty"`
	StringValues []string    `protobuf:"bytes,4,rep,name=string_values,json=stringValues,proto3" json:"string_values,omitempty"`
	DataValues   []*DataNode `protobuf:"bytes,5,rep,name=data_values,json=dataValues,proto3" json:"data_values,omitempty"`
}

func (x *WriteMetricsRequestV2_BatchValue) Reset() {
	*x = WriteMetricsRequestV2_BatchValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_for_agent_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMetricsRequestV2_BatchValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMetricsRequestV2_BatchValue) ProtoMessage() {}

func (x *WriteMetricsRequestV2_BatchValue) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_for_agent_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMetricsRequestV2_BatchValue.ProtoReflect.Descriptor instead.
func (*WriteMetricsRequestV2_BatchValue) Descriptor() ([]byte, []int) {
	return file_gateway_for_agent_proto_rawDescGZIP(), []int{5, 2}
}

func (x *WriteMetricsRequestV2_BatchValue) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *WriteMetricsRequestV2_BatchValue) GetTagValues() []string {
	if x != nil {
		return x.TagValues
	}
	return nil
}

func (x *WriteMetricsRequestV2_BatchValue) GetNumberValues() []float64 {
	if x != nil {
		return x.NumberValues
	}
	return nil
}

func (x *WriteMetricsRequestV2_BatchValue) GetStringValues() []string {
	if x != nil {
		return x.StringValues
	}
	return nil
}

func (x *WriteMetricsRequestV2_BatchValue) GetDataValues() []*DataNode {
	if x != nil {
		return x.DataValues
	}
	return nil
}

type WriteMetricsRequestV3_TaskBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 任务的key TODO 这个有点冗余, 其实下面2个key够用了
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// 对应哪个采集配置
	RefCollectKey string `protobuf:"bytes,2,opt,name=ref_collect_key,json=refCollectKey,proto3" json:"ref_collect_key,omitempty"`
	// 对应哪个采集目标
	RefTargetKey string `protobuf:"bytes,3,opt,name=ref_target_key,json=refTargetKey,proto3" json:"ref_target_key,omitempty"`
	// 指标名
	// string metric_name = 4;
	Batch *WriteMetricsRequestV2_Batch `protobuf:"bytes,4,opt,name=batch,proto3" json:"batch,omitempty"`
}

func (x *WriteMetricsRequestV3_TaskBatch) Reset() {
	*x = WriteMetricsRequestV3_TaskBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_for_agent_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMetricsRequestV3_TaskBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMetricsRequestV3_TaskBatch) ProtoMessage() {}

func (x *WriteMetricsRequestV3_TaskBatch) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_for_agent_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMetricsRequestV3_TaskBatch.ProtoReflect.Descriptor instead.
func (*WriteMetricsRequestV3_TaskBatch) Descriptor() ([]byte, []int) {
	return file_gateway_for_agent_proto_rawDescGZIP(), []int{6, 0}
}

func (x *WriteMetricsRequestV3_TaskBatch) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *WriteMetricsRequestV3_TaskBatch) GetRefCollectKey() string {
	if x != nil {
		return x.RefCollectKey
	}
	return ""
}

func (x *WriteMetricsRequestV3_TaskBatch) GetRefTargetKey() string {
	if x != nil {
		return x.RefTargetKey
	}
	return ""
}

func (x *WriteMetricsRequestV3_TaskBatch) GetBatch() *WriteMetricsRequestV2_Batch {
	if x != nil {
		return x.Batch
	}
	return nil
}

// 采集任务的结果
type WriteMetricsRequestV4_TaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 任务的key TODO 这个有点冗余, 其实下面2个key够用了
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// 对应哪个采集配置
	RefCollectKey string `protobuf:"bytes,2,opt,name=ref_collect_key,json=refCollectKey,proto3" json:"ref_collect_key,omitempty"`
	// 对应哪个采集目标
	RefTargetKey string `protobuf:"bytes,3,opt,name=ref_target_key,json=refTargetKey,proto3" json:"ref_target_key,omitempty"`
	// 数据结果, 使用表的形式
	Table *WriteMetricsRequestV4_Table `protobuf:"bytes,4,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *WriteMetricsRequestV4_TaskResult) Reset() {
	*x = WriteMetricsRequestV4_TaskResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_for_agent_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMetricsRequestV4_TaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMetricsRequestV4_TaskResult) ProtoMessage() {}

func (x *WriteMetricsRequestV4_TaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_for_agent_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMetricsRequestV4_TaskResult.ProtoReflect.Descriptor instead.
func (*WriteMetricsRequestV4_TaskResult) Descriptor() ([]byte, []int) {
	return file_gateway_for_agent_proto_rawDescGZIP(), []int{7, 0}
}

func (x *WriteMetricsRequestV4_TaskResult) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *WriteMetricsRequestV4_TaskResult) GetRefCollectKey() string {
	if x != nil {
		return x.RefCollectKey
	}
	return ""
}

func (x *WriteMetricsRequestV4_TaskResult) GetRefTargetKey() string {
	if x != nil {
		return x.RefTargetKey
	}
	return ""
}

func (x *WriteMetricsRequestV4_TaskResult) GetTable() *WriteMetricsRequestV4_Table {
	if x != nil {
		return x.Table
	}
	return nil
}

type WriteMetricsRequestV4_Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 表头
	Header *WriteMetricsRequestV4_Header `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// 每个行就是一个维度组合的聚合结果
	Rows []*WriteMetricsRequestV4_Row `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *WriteMetricsRequestV4_Table) Reset() {
	*x = WriteMetricsRequestV4_Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_for_agent_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMetricsRequestV4_Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMetricsRequestV4_Table) ProtoMessage() {}

func (x *WriteMetricsRequestV4_Table) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_for_agent_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMetricsRequestV4_Table.ProtoReflect.Descriptor instead.
func (*WriteMetricsRequestV4_Table) Descriptor() ([]byte, []int) {
	return file_gateway_for_agent_proto_rawDescGZIP(), []int{7, 1}
}

func (x *WriteMetricsRequestV4_Table) GetHeader() *WriteMetricsRequestV4_Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *WriteMetricsRequestV4_Table) GetRows() []*WriteMetricsRequestV4_Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 表头
type WriteMetricsRequestV4_Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricName string   `protobuf:"bytes,1,opt,name=metric_name,json=metricName,proto3" json:"metric_name,omitempty"`
	TagKeys    []string `protobuf:"bytes,2,rep,name=tag_keys,json=tagKeys,proto3" json:"tag_keys,omitempty"`
	ValueKeys  []string `protobuf:"bytes,3,rep,name=value_keys,json=valueKeys,proto3" json:"value_keys,omitempty"`
}

func (x *WriteMetricsRequestV4_Header) Reset() {
	*x = WriteMetricsRequestV4_Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_for_agent_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMetricsRequestV4_Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMetricsRequestV4_Header) ProtoMessage() {}

func (x *WriteMetricsRequestV4_Header) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_for_agent_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMetricsRequestV4_Header.ProtoReflect.Descriptor instead.
func (*WriteMetricsRequestV4_Header) Descriptor() ([]byte, []int) {
	return file_gateway_for_agent_proto_rawDescGZIP(), []int{7, 2}
}

func (x *WriteMetricsRequestV4_Header) GetMetricName() string {
	if x != nil {
		return x.MetricName
	}
	return ""
}

func (x *WriteMetricsRequestV4_Header) GetTagKeys() []string {
	if x != nil {
		return x.TagKeys
	}
	return nil
}

func (x *WriteMetricsRequestV4_Header) GetValueKeys() []string {
	if x != nil {
		return x.ValueKeys
	}
	return nil
}

// 行
type WriteMetricsRequestV4_Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   int64       `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TagValues   []string    `protobuf:"bytes,2,rep,name=tag_values,json=tagValues,proto3" json:"tag_values,omitempty"`
	ValueValues []*DataNode `protobuf:"bytes,3,rep,name=value_values,json=valueValues,proto3" json:"value_values,omitempty"`
}

func (x *WriteMetricsRequestV4_Row) Reset() {
	*x = WriteMetricsRequestV4_Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gateway_for_agent_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteMetricsRequestV4_Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteMetricsRequestV4_Row) ProtoMessage() {}

func (x *WriteMetricsRequestV4_Row) ProtoReflect() protoreflect.Message {
	mi := &file_gateway_for_agent_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteMetricsRequestV4_Row.ProtoReflect.Descriptor instead.
func (*WriteMetricsRequestV4_Row) Descriptor() ([]byte, []int) {
	return file_gateway_for_agent_proto_rawDescGZIP(), []int{7, 3}
}

func (x *WriteMetricsRequestV4_Row) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *WriteMetricsRequestV4_Row) GetTagValues() []string {
	if x != nil {
		return x.TagValues
	}
	return nil
}

func (x *WriteMetricsRequestV4_Row) GetValueValues() []*DataNode {
	if x != nil {
		return x.ValueValues
	}
	return nil
}

var File_gateway_for_agent_proto protoreflect.FileDescriptor

var file_gateway_for_agent_proto_rawDesc = []byte{
	0x0a, 0x17, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2d, 0x66, 0x6f, 0x72, 0x2d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x69, 0x6f, 0x2e, 0x68, 0x6f,
	0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0x6c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x8e,
	0x04, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x47, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x60, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c,
	0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x60, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x68,
	0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a,
	0x11, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f,
	0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x60, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x22, 0xa8, 0x01, 0x0a, 0x15, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31, 0x12, 0x4e, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x05, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x93, 0x06, 0x0a,
	0x15, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x4e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x1a, 0xc2, 0x01,
	0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x5d, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c,
	0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x56, 0x32, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x5a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32,
	0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0xa8, 0x01, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0xe2, 0x01,
	0x0a, 0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01,
	0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f,
	0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x87, 0x03, 0x0a, 0x15, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x12, 0x4e, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x05,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x56, 0x33, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x1a, 0xc2, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x55, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x22, 0xbf, 0x06, 0x0a,
	0x15, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x56, 0x34, 0x12, 0x4e, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c,
	0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x56, 0x34, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xc3, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x72, 0x65, 0x66, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x24, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x55, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x34, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xb4, 0x01, 0x0a,
	0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56,
	0x34, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x51, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d,
	0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x34, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x04, 0x72,
	0x6f, 0x77, 0x73, 0x1a, 0x63, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x1a, 0x93, 0x01, 0x0a, 0x03, 0x52, 0x6f, 0x77,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4f, 0x0a,
	0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x67,
	0x0a, 0x14, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f,
	0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x32, 0x91, 0x06, 0x0a, 0x0e, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3c, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x69, 0x6f, 0x2e,
	0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x10,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x76, 0x31,
	0x12, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x31, 0x1a, 0x38, 0x2e, 0x69, 0x6f,
	0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x76, 0x32, 0x12, 0x39, 0x2e, 0x69,
	0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x32, 0x1a, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c,
	0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x76, 0x33, 0x12, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f,
	0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x56, 0x33, 0x1a, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x89, 0x01, 0x0a, 0x10, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5f, 0x76, 0x34, 0x12, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e,
	0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56, 0x34, 0x1a,
	0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x73, 0x0a, 0x22, 0x69,
	0x6f, 0x2e, 0x68, 0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x42, 0x0d, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x50, 0x01, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68,
	0x6f, 0x6c, 0x6f, 0x69, 0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2f, 0x68, 0x6f, 0x6c, 0x6f, 0x69,
	0x6e, 0x73, 0x69, 0x67, 0x68, 0x74, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gateway_for_agent_proto_rawDescOnce sync.Once
	file_gateway_for_agent_proto_rawDescData = file_gateway_for_agent_proto_rawDesc
)

func file_gateway_for_agent_proto_rawDescGZIP() []byte {
	file_gateway_for_agent_proto_rawDescOnce.Do(func() {
		file_gateway_for_agent_proto_rawDescData = protoimpl.X.CompressGZIP(file_gateway_for_agent_proto_rawDescData)
	})
	return file_gateway_for_agent_proto_rawDescData
}

var file_gateway_for_agent_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_gateway_for_agent_proto_goTypes = []interface{}{
	(*GetControlConfigsRequest)(nil),    // 0: io.holoinsight.server.gateway.grpc.GetControlConfigsRequest
	(*GetControlConfigsResponse)(nil),   // 1: io.holoinsight.server.gateway.grpc.GetControlConfigsResponse
	(*Point)(nil),                       // 2: io.holoinsight.server.gateway.grpc.Point
	(*DataNode)(nil),                    // 3: io.holoinsight.server.gateway.grpc.DataNode
	(*WriteMetricsRequestV1)(nil),       // 4: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV1
	(*WriteMetricsRequestV2)(nil),       // 5: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV2
	(*WriteMetricsRequestV3)(nil),       // 6: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV3
	(*WriteMetricsRequestV4)(nil),       // 7: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV4
	(*WriteMetricsResponse)(nil),        // 8: io.holoinsight.server.gateway.grpc.WriteMetricsResponse
	nil,                                 // 9: io.holoinsight.server.gateway.grpc.Point.TagsEntry
	nil,                                 // 10: io.holoinsight.server.gateway.grpc.Point.NumberValuesEntry
	nil,                                 // 11: io.holoinsight.server.gateway.grpc.Point.StringValuesEntry
	(*WriteMetricsRequestV2_Batch)(nil), // 12: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV2.Batch
	(*WriteMetricsRequestV2_BatchHeader)(nil), // 13: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV2.BatchHeader
	(*WriteMetricsRequestV2_BatchValue)(nil),  // 14: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV2.BatchValue
	(*WriteMetricsRequestV3_TaskBatch)(nil),   // 15: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV3.TaskBatch
	(*WriteMetricsRequestV4_TaskResult)(nil),  // 16: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV4.TaskResult
	(*WriteMetricsRequestV4_Table)(nil),       // 17: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV4.Table
	(*WriteMetricsRequestV4_Header)(nil),      // 18: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV4.Header
	(*WriteMetricsRequestV4_Row)(nil),         // 19: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV4.Row
	(*pb.CommonRequestHeader)(nil),            // 20: io.holoinsight.server.common.grpc.CommonRequestHeader
	(*pb.CommonResponseHeader)(nil),           // 21: io.holoinsight.server.common.grpc.CommonResponseHeader
	(*emptypb.Empty)(nil),                     // 22: google.protobuf.Empty
}
var file_gateway_for_agent_proto_depIdxs = []int32{
	20, // 0: io.holoinsight.server.gateway.grpc.GetControlConfigsRequest.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	21, // 1: io.holoinsight.server.gateway.grpc.GetControlConfigsResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonResponseHeader
	9,  // 2: io.holoinsight.server.gateway.grpc.Point.tags:type_name -> io.holoinsight.server.gateway.grpc.Point.TagsEntry
	10, // 3: io.holoinsight.server.gateway.grpc.Point.number_values:type_name -> io.holoinsight.server.gateway.grpc.Point.NumberValuesEntry
	11, // 4: io.holoinsight.server.gateway.grpc.Point.string_values:type_name -> io.holoinsight.server.gateway.grpc.Point.StringValuesEntry
	20, // 5: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV1.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	2,  // 6: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV1.point:type_name -> io.holoinsight.server.gateway.grpc.Point
	20, // 7: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV2.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	12, // 8: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV2.batch:type_name -> io.holoinsight.server.gateway.grpc.WriteMetricsRequestV2.Batch
	20, // 9: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV3.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	15, // 10: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV3.batch:type_name -> io.holoinsight.server.gateway.grpc.WriteMetricsRequestV3.TaskBatch
	20, // 11: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV4.header:type_name -> io.holoinsight.server.common.grpc.CommonRequestHeader
	16, // 12: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV4.results:type_name -> io.holoinsight.server.gateway.grpc.WriteMetricsRequestV4.TaskResult
	21, // 13: io.holoinsight.server.gateway.grpc.WriteMetricsResponse.header:type_name -> io.holoinsight.server.common.grpc.CommonResponseHeader
	13, // 14: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV2.Batch.header:type_name -> io.holoinsight.server.gateway.grpc.WriteMetricsRequestV2.BatchHeader
	14, // 15: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV2.Batch.value:type_name -> io.holoinsight.server.gateway.grpc.WriteMetricsRequestV2.BatchValue
	3,  // 16: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV2.BatchValue.data_values:type_name -> io.holoinsight.server.gateway.grpc.DataNode
	12, // 17: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV3.TaskBatch.batch:type_name -> io.holoinsight.server.gateway.grpc.WriteMetricsRequestV2.Batch
	17, // 18: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV4.TaskResult.table:type_name -> io.holoinsight.server.gateway.grpc.WriteMetricsRequestV4.Table
	18, // 19: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV4.Table.header:type_name -> io.holoinsight.server.gateway.grpc.WriteMetricsRequestV4.Header
	19, // 20: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV4.Table.rows:type_name -> io.holoinsight.server.gateway.grpc.WriteMetricsRequestV4.Row
	3,  // 21: io.holoinsight.server.gateway.grpc.WriteMetricsRequestV4.Row.value_values:type_name -> io.holoinsight.server.gateway.grpc.DataNode
	22, // 22: io.holoinsight.server.gateway.grpc.GatewayService.ping:input_type -> google.protobuf.Empty
	0,  // 23: io.holoinsight.server.gateway.grpc.GatewayService.get_control_configs:input_type -> io.holoinsight.server.gateway.grpc.GetControlConfigsRequest
	4,  // 24: io.holoinsight.server.gateway.grpc.GatewayService.write_metrics_v1:input_type -> io.holoinsight.server.gateway.grpc.WriteMetricsRequestV1
	5,  // 25: io.holoinsight.server.gateway.grpc.GatewayService.write_metrics_v2:input_type -> io.holoinsight.server.gateway.grpc.WriteMetricsRequestV2
	6,  // 26: io.holoinsight.server.gateway.grpc.GatewayService.write_metrics_v3:input_type -> io.holoinsight.server.gateway.grpc.WriteMetricsRequestV3
	7,  // 27: io.holoinsight.server.gateway.grpc.GatewayService.write_metrics_v4:input_type -> io.holoinsight.server.gateway.grpc.WriteMetricsRequestV4
	22, // 28: io.holoinsight.server.gateway.grpc.GatewayService.ping:output_type -> google.protobuf.Empty
	1,  // 29: io.holoinsight.server.gateway.grpc.GatewayService.get_control_configs:output_type -> io.holoinsight.server.gateway.grpc.GetControlConfigsResponse
	8,  // 30: io.holoinsight.server.gateway.grpc.GatewayService.write_metrics_v1:output_type -> io.holoinsight.server.gateway.grpc.WriteMetricsResponse
	8,  // 31: io.holoinsight.server.gateway.grpc.GatewayService.write_metrics_v2:output_type -> io.holoinsight.server.gateway.grpc.WriteMetricsResponse
	8,  // 32: io.holoinsight.server.gateway.grpc.GatewayService.write_metrics_v3:output_type -> io.holoinsight.server.gateway.grpc.WriteMetricsResponse
	8,  // 33: io.holoinsight.server.gateway.grpc.GatewayService.write_metrics_v4:output_type -> io.holoinsight.server.gateway.grpc.WriteMetricsResponse
	28, // [28:34] is the sub-list for method output_type
	22, // [22:28] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_gateway_for_agent_proto_init() }
func file_gateway_for_agent_proto_init() {
	if File_gateway_for_agent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gateway_for_agent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetControlConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_for_agent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetControlConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_for_agent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_for_agent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_for_agent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMetricsRequestV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_for_agent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMetricsRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_for_agent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMetricsRequestV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_for_agent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMetricsRequestV4); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_for_agent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_for_agent_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMetricsRequestV2_Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_for_agent_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMetricsRequestV2_BatchHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_for_agent_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMetricsRequestV2_BatchValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_for_agent_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMetricsRequestV3_TaskBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_for_agent_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMetricsRequestV4_TaskResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_for_agent_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMetricsRequestV4_Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_for_agent_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMetricsRequestV4_Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gateway_for_agent_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteMetricsRequestV4_Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gateway_for_agent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gateway_for_agent_proto_goTypes,
		DependencyIndexes: file_gateway_for_agent_proto_depIdxs,
		MessageInfos:      file_gateway_for_agent_proto_msgTypes,
	}.Build()
	File_gateway_for_agent_proto = out.File
	file_gateway_for_agent_proto_rawDesc = nil
	file_gateway_for_agent_proto_goTypes = nil
	file_gateway_for_agent_proto_depIdxs = nil
}
