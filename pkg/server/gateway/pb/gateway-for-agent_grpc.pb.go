/*
 * Copyright 2022 Holoinsight Project Authors. Licensed under Apache-2.0.
 */

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: gateway-for-agent.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayServiceClient is the client API for GatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayServiceClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 查询控制参数
	GetControlConfigs(ctx context.Context, in *GetControlConfigsRequest, opts ...grpc.CallOption) (*GetControlConfigsResponse, error)
	// deprecated
	WriteMetricsV1(ctx context.Context, in *WriteMetricsRequestV1, opts ...grpc.CallOption) (*WriteMetricsResponse, error)
	// deprecated
	WriteMetricsV2(ctx context.Context, in *WriteMetricsRequestV2, opts ...grpc.CallOption) (*WriteMetricsResponse, error)
	// deprecated
	WriteMetricsV3(ctx context.Context, in *WriteMetricsRequestV3, opts ...grpc.CallOption) (*WriteMetricsResponse, error)
	WriteMetricsV4(ctx context.Context, in *WriteMetricsRequestV4, opts ...grpc.CallOption) (*WriteMetricsResponse, error)
}

type gatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayServiceClient(cc grpc.ClientConnInterface) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/io.holoinsight.server.gateway.grpc.GatewayService/ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetControlConfigs(ctx context.Context, in *GetControlConfigsRequest, opts ...grpc.CallOption) (*GetControlConfigsResponse, error) {
	out := new(GetControlConfigsResponse)
	err := c.cc.Invoke(ctx, "/io.holoinsight.server.gateway.grpc.GatewayService/get_control_configs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) WriteMetricsV1(ctx context.Context, in *WriteMetricsRequestV1, opts ...grpc.CallOption) (*WriteMetricsResponse, error) {
	out := new(WriteMetricsResponse)
	err := c.cc.Invoke(ctx, "/io.holoinsight.server.gateway.grpc.GatewayService/write_metrics_v1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) WriteMetricsV2(ctx context.Context, in *WriteMetricsRequestV2, opts ...grpc.CallOption) (*WriteMetricsResponse, error) {
	out := new(WriteMetricsResponse)
	err := c.cc.Invoke(ctx, "/io.holoinsight.server.gateway.grpc.GatewayService/write_metrics_v2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) WriteMetricsV3(ctx context.Context, in *WriteMetricsRequestV3, opts ...grpc.CallOption) (*WriteMetricsResponse, error) {
	out := new(WriteMetricsResponse)
	err := c.cc.Invoke(ctx, "/io.holoinsight.server.gateway.grpc.GatewayService/write_metrics_v3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) WriteMetricsV4(ctx context.Context, in *WriteMetricsRequestV4, opts ...grpc.CallOption) (*WriteMetricsResponse, error) {
	out := new(WriteMetricsResponse)
	err := c.cc.Invoke(ctx, "/io.holoinsight.server.gateway.grpc.GatewayService/write_metrics_v4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServiceServer is the server API for GatewayService service.
// All implementations must embed UnimplementedGatewayServiceServer
// for forward compatibility
type GatewayServiceServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// 查询控制参数
	GetControlConfigs(context.Context, *GetControlConfigsRequest) (*GetControlConfigsResponse, error)
	// deprecated
	WriteMetricsV1(context.Context, *WriteMetricsRequestV1) (*WriteMetricsResponse, error)
	// deprecated
	WriteMetricsV2(context.Context, *WriteMetricsRequestV2) (*WriteMetricsResponse, error)
	// deprecated
	WriteMetricsV3(context.Context, *WriteMetricsRequestV3) (*WriteMetricsResponse, error)
	WriteMetricsV4(context.Context, *WriteMetricsRequestV4) (*WriteMetricsResponse, error)
	mustEmbedUnimplementedGatewayServiceServer()
}

// UnimplementedGatewayServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServiceServer struct {
}

func (UnimplementedGatewayServiceServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGatewayServiceServer) GetControlConfigs(context.Context, *GetControlConfigsRequest) (*GetControlConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControlConfigs not implemented")
}
func (UnimplementedGatewayServiceServer) WriteMetricsV1(context.Context, *WriteMetricsRequestV1) (*WriteMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteMetricsV1 not implemented")
}
func (UnimplementedGatewayServiceServer) WriteMetricsV2(context.Context, *WriteMetricsRequestV2) (*WriteMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteMetricsV2 not implemented")
}
func (UnimplementedGatewayServiceServer) WriteMetricsV3(context.Context, *WriteMetricsRequestV3) (*WriteMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteMetricsV3 not implemented")
}
func (UnimplementedGatewayServiceServer) WriteMetricsV4(context.Context, *WriteMetricsRequestV4) (*WriteMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteMetricsV4 not implemented")
}
func (UnimplementedGatewayServiceServer) mustEmbedUnimplementedGatewayServiceServer() {}

// UnsafeGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServiceServer will
// result in compilation errors.
type UnsafeGatewayServiceServer interface {
	mustEmbedUnimplementedGatewayServiceServer()
}

func RegisterGatewayServiceServer(s grpc.ServiceRegistrar, srv GatewayServiceServer) {
	s.RegisterService(&GatewayService_ServiceDesc, srv)
}

func _GatewayService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.server.gateway.grpc.GatewayService/ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetControlConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControlConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetControlConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.server.gateway.grpc.GatewayService/get_control_configs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetControlConfigs(ctx, req.(*GetControlConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_WriteMetricsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteMetricsRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).WriteMetricsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.server.gateway.grpc.GatewayService/write_metrics_v1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).WriteMetricsV1(ctx, req.(*WriteMetricsRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_WriteMetricsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteMetricsRequestV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).WriteMetricsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.server.gateway.grpc.GatewayService/write_metrics_v2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).WriteMetricsV2(ctx, req.(*WriteMetricsRequestV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_WriteMetricsV3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteMetricsRequestV3)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).WriteMetricsV3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.server.gateway.grpc.GatewayService/write_metrics_v3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).WriteMetricsV3(ctx, req.(*WriteMetricsRequestV3))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_WriteMetricsV4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteMetricsRequestV4)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).WriteMetricsV4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.server.gateway.grpc.GatewayService/write_metrics_v4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).WriteMetricsV4(ctx, req.(*WriteMetricsRequestV4))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayService_ServiceDesc is the grpc.ServiceDesc for GatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.holoinsight.server.gateway.grpc.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ping",
			Handler:    _GatewayService_Ping_Handler,
		},
		{
			MethodName: "get_control_configs",
			Handler:    _GatewayService_GetControlConfigs_Handler,
		},
		{
			MethodName: "write_metrics_v1",
			Handler:    _GatewayService_WriteMetricsV1_Handler,
		},
		{
			MethodName: "write_metrics_v2",
			Handler:    _GatewayService_WriteMetricsV2_Handler,
		},
		{
			MethodName: "write_metrics_v3",
			Handler:    _GatewayService_WriteMetricsV3_Handler,
		},
		{
			MethodName: "write_metrics_v4",
			Handler:    _GatewayService_WriteMetricsV4_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway-for-agent.proto",
}
