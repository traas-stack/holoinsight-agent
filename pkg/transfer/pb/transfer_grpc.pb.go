/*
 * Copyright 2022 Holoinsight Project Authors. Licensed under Apache-2.0.
 */

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: transfer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransferSrviceClient is the client API for TransferSrvice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferSrviceClient interface {
	Prepare(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	StopAndSaveState(ctx context.Context, in *StopAndSaveSaveRequest, opts ...grpc.CallOption) (*StopAndSaveSaveResponse, error)
	TransferDone(ctx context.Context, in *TransferDoneRequest, opts ...grpc.CallOption) (*TransferDoneResponse, error)
}

type transferSrviceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferSrviceClient(cc grpc.ClientConnInterface) TransferSrviceClient {
	return &transferSrviceClient{cc}
}

func (c *transferSrviceClient) Prepare(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/io.holoinsight.agent.transfer.TransferSrvice/prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferSrviceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/io.holoinsight.agent.transfer.TransferSrvice/ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferSrviceClient) StopAndSaveState(ctx context.Context, in *StopAndSaveSaveRequest, opts ...grpc.CallOption) (*StopAndSaveSaveResponse, error) {
	out := new(StopAndSaveSaveResponse)
	err := c.cc.Invoke(ctx, "/io.holoinsight.agent.transfer.TransferSrvice/stop_and_save_state", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferSrviceClient) TransferDone(ctx context.Context, in *TransferDoneRequest, opts ...grpc.CallOption) (*TransferDoneResponse, error) {
	out := new(TransferDoneResponse)
	err := c.cc.Invoke(ctx, "/io.holoinsight.agent.transfer.TransferSrvice/transfer_done", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferSrviceServer is the server API for TransferSrvice service.
// All implementations must embed UnimplementedTransferSrviceServer
// for forward compatibility
type TransferSrviceServer interface {
	Prepare(context.Context, *PingRequest) (*PingResponse, error)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	StopAndSaveState(context.Context, *StopAndSaveSaveRequest) (*StopAndSaveSaveResponse, error)
	TransferDone(context.Context, *TransferDoneRequest) (*TransferDoneResponse, error)
	mustEmbedUnimplementedTransferSrviceServer()
}

// UnimplementedTransferSrviceServer must be embedded to have forward compatible implementations.
type UnimplementedTransferSrviceServer struct {
}

func (UnimplementedTransferSrviceServer) Prepare(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedTransferSrviceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTransferSrviceServer) StopAndSaveState(context.Context, *StopAndSaveSaveRequest) (*StopAndSaveSaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopAndSaveState not implemented")
}
func (UnimplementedTransferSrviceServer) TransferDone(context.Context, *TransferDoneRequest) (*TransferDoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferDone not implemented")
}
func (UnimplementedTransferSrviceServer) mustEmbedUnimplementedTransferSrviceServer() {}

// UnsafeTransferSrviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferSrviceServer will
// result in compilation errors.
type UnsafeTransferSrviceServer interface {
	mustEmbedUnimplementedTransferSrviceServer()
}

func RegisterTransferSrviceServer(s grpc.ServiceRegistrar, srv TransferSrviceServer) {
	s.RegisterService(&TransferSrvice_ServiceDesc, srv)
}

func _TransferSrvice_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferSrviceServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.agent.transfer.TransferSrvice/prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferSrviceServer).Prepare(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferSrvice_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferSrviceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.agent.transfer.TransferSrvice/ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferSrviceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferSrvice_StopAndSaveState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopAndSaveSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferSrviceServer).StopAndSaveState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.agent.transfer.TransferSrvice/stop_and_save_state",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferSrviceServer).StopAndSaveState(ctx, req.(*StopAndSaveSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferSrvice_TransferDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferSrviceServer).TransferDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.holoinsight.agent.transfer.TransferSrvice/transfer_done",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferSrviceServer).TransferDone(ctx, req.(*TransferDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransferSrvice_ServiceDesc is the grpc.ServiceDesc for TransferSrvice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferSrvice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.holoinsight.agent.transfer.TransferSrvice",
	HandlerType: (*TransferSrviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "prepare",
			Handler:    _TransferSrvice_Prepare_Handler,
		},
		{
			MethodName: "ping",
			Handler:    _TransferSrvice_Ping_Handler,
		},
		{
			MethodName: "stop_and_save_state",
			Handler:    _TransferSrvice_StopAndSaveState_Handler,
		},
		{
			MethodName: "transfer_done",
			Handler:    _TransferSrvice_TransferDone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer.proto",
}
